<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../../Nncase.Core/IR/IRListParser.tt"#>
//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4 template.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Reactive;
using Nncase.IR;

namespace Nncase.PatternMatch;

internal partial class Matcher
{
<#
var autoGenIRs = new HashSet<string>
{
    "Var",
    "TensorConst",
    "TupleConst",
    "Function",
    "Call",
    "Tuple",
    "Marker",
    "Fusion",
};

foreach (var ir in irs.Where(x => autoGenIRs.Contains(x.Name)))
{
    var isConstPattern = ir.VisitBase == "Const";
    var func1 = !isConstPattern ? "DefaultVisit" : $"Visit{ir.VisitBase}";
#>
    /// <inheritdoc/>
    protected override bool Visit<#=ir.Name#>(<#=ir.Namespace#><#=ir.Name#> expr, IPattern pattern)
    {
        if (pattern is <#=ir.Name#>Pattern exprPattern)
        {
            return exprPattern.MatchLeaf(expr)
<#
    foreach (var field in ir.Fields)
    {
        var func2 = field.StartsWith("@") ? "VisitVArgsPattern" : "Visit";
        var fieldName = field.TrimStart('@');
#>
                && <#=func2#>(expr.<#=fieldName#>, exprPattern.<#=fieldName#>)
<#
    }
#>
            ;
        }

        return <#=func1#>(expr, pattern);
    }

<#
}
#>
}
