//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4 template.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Reactive;

namespace Nncase.IR;

public partial class ExprRewriter<TContext>
{
    /// <inheritdoc/>
    protected sealed override Expr VisitLeafBaseFunction(BaseFunction expr, TContext context)
    {
        return RewriteLeafBaseFunction(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafCall(Call expr, TContext context)
    {
        return RewriteLeafCall(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafConst(Const expr, TContext context)
    {
        return RewriteLeafConst(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafFunction(Function expr, TContext context)
    {
        return RewriteLeafFunction(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafFusion(Fusion expr, TContext context)
    {
        return RewriteLeafFusion(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafIf(If expr, TContext context)
    {
        return RewriteLeafIf(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafMarker(Marker expr, TContext context)
    {
        return RewriteLeafMarker(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafNone(None expr, TContext context)
    {
        return RewriteLeafNone(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafOp(Op expr, TContext context)
    {
        return RewriteLeafOp(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafPrimFunctionWrapper(PrimFunctionWrapper expr, TContext context)
    {
        return RewriteLeafPrimFunctionWrapper(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafShape(IR.Shape expr, TContext context)
    {
        return RewriteLeafShape(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafTensorConst(TensorConst expr, TContext context)
    {
        return RewriteLeafTensorConst(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafTuple(IR.Tuple expr, TContext context)
    {
        return RewriteLeafTuple(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafTupleConst(TupleConst expr, TContext context)
    {
        return RewriteLeafTupleConst(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafMemSpan(TIR.MemSpan expr, TContext context)
    {
        return RewriteLeafMemSpan(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafVar(Var expr, TContext context)
    {
        return RewriteLeafVar(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafBlock(TIR.Block expr, TContext context)
    {
        return RewriteLeafBlock(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafBuffer(TIR.Buffer expr, TContext context)
    {
        return RewriteLeafBuffer(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafBufferRegion(TIR.BufferRegion expr, TContext context)
    {
        return RewriteLeafBufferRegion(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafFor(TIR.For expr, TContext context)
    {
        return RewriteLeafFor(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafIfThenElse(TIR.IfThenElse expr, TContext context)
    {
        return RewriteLeafIfThenElse(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafLet(TIR.Let expr, TContext context)
    {
        return RewriteLeafLet(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafPrimFunction(TIR.PrimFunction expr, TContext context)
    {
        return RewriteLeafPrimFunction(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafSequential(TIR.Sequential expr, TContext context)
    {
        return RewriteLeafSequential(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafRange(TIR.Range expr, TContext context)
    {
        return RewriteLeafRange(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafIterVar(TIR.IterVar expr, TContext context)
    {
        return RewriteLeafIterVar(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafAffineExpr(Affine.AffineExpr expr, TContext context)
    {
        return RewriteLeafAffineExpr(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafAffineSymbolBase(Affine.AffineSymbolBase expr, TContext context)
    {
        return RewriteLeafAffineSymbolBase(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafAffineDim(Affine.AffineDim expr, TContext context)
    {
        return RewriteLeafAffineDim(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafAffineExtent(Affine.AffineExtent expr, TContext context)
    {
        return RewriteLeafAffineExtent(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafAffineSymbol(Affine.AffineSymbol expr, TContext context)
    {
        return RewriteLeafAffineSymbol(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafAffineConstant(Affine.AffineConstant expr, TContext context)
    {
        return RewriteLeafAffineConstant(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafAffineAddBinary(Affine.AffineAddBinary expr, TContext context)
    {
        return RewriteLeafAffineAddBinary(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafAffineMulBinary(Affine.AffineMulBinary expr, TContext context)
    {
        return RewriteLeafAffineMulBinary(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafAffineDivBinary(Affine.AffineDivBinary expr, TContext context)
    {
        return RewriteLeafAffineDivBinary(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafAffineDomain(Affine.AffineDomain expr, TContext context)
    {
        return RewriteLeafAffineDomain(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafAffineRange(Affine.AffineRange expr, TContext context)
    {
        return RewriteLeafAffineRange(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafAffineMap(Affine.AffineMap expr, TContext context)
    {
        return RewriteLeafAffineMap(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafAffineRelation(Affine.AffineRelation expr, TContext context)
    {
        return RewriteLeafAffineRelation(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafGrid(Affine.Grid expr, TContext context)
    {
        return RewriteLeafGrid(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafLoad(Affine.Load expr, TContext context)
    {
        return RewriteLeafLoad(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafFor(Affine.For expr, TContext context)
    {
        return RewriteLeafFor(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafBufferOf(Buffers.BufferOf expr, TContext context)
    {
        return RewriteLeafBufferOf(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafDimension(Dimension expr, TContext context)
    {
        return RewriteLeafDimension(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafAsDim(AsDim expr, TContext context)
    {
        return RewriteLeafAsDim(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafUnknownDim(UnknownDim expr, TContext context)
    {
        return RewriteLeafUnknownDim(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafDimVar(DimVar expr, TContext context)
    {
        return RewriteLeafDimVar(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafDimConst(DimConst expr, TContext context)
    {
        return RewriteLeafDimConst(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafDimPower(DimPower expr, TContext context)
    {
        return RewriteLeafDimPower(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafDimFraction(DimFraction expr, TContext context)
    {
        return RewriteLeafDimFraction(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafDimRemainder(DimRemainder expr, TContext context)
    {
        return RewriteLeafDimRemainder(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafDimProduct(DimProduct expr, TContext context)
    {
        return RewriteLeafDimProduct(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafDimSum(DimSum expr, TContext context)
    {
        return RewriteLeafDimSum(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafDimAbs(DimAbs expr, TContext context)
    {
        return RewriteLeafDimAbs(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafDimClamp(DimClamp expr, TContext context)
    {
        return RewriteLeafDimClamp(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafDimCompareAndSelect(DimCompareAndSelect expr, TContext context)
    {
        return RewriteLeafDimCompareAndSelect(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafDimMin(DimMin expr, TContext context)
    {
        return RewriteLeafDimMin(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafDimMax(DimMax expr, TContext context)
    {
        return RewriteLeafDimMax(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafDimPositive(DimPositive expr, TContext context)
    {
        return RewriteLeafDimPositive(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafPadding(Shapes.Padding expr, TContext context)
    {
        return RewriteLeafPadding(expr, context);
    }

    /// <inheritdoc/>
    protected sealed override Expr VisitLeafPaddings(Shapes.Paddings expr, TContext context)
    {
        return RewriteLeafPaddings(expr, context);
    }

    /// <summary>
    /// Rewrite leaf <see cref="BaseFunction"/>.
    /// </summary>
    protected virtual Expr RewriteLeafBaseFunction(BaseFunction expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Call"/>.
    /// </summary>
    protected virtual Expr RewriteLeafCall(Call expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Const"/>.
    /// </summary>
    protected virtual Expr RewriteLeafConst(Const expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Function"/>.
    /// </summary>
    protected virtual Expr RewriteLeafFunction(Function expr, TContext context) => RewriteLeafBaseFunction(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Fusion"/>.
    /// </summary>
    protected virtual Expr RewriteLeafFusion(Fusion expr, TContext context) => RewriteLeafBaseFunction(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="If"/>.
    /// </summary>
    protected virtual Expr RewriteLeafIf(If expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Marker"/>.
    /// </summary>
    protected virtual Expr RewriteLeafMarker(Marker expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="None"/>.
    /// </summary>
    protected virtual Expr RewriteLeafNone(None expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Op"/>.
    /// </summary>
    protected virtual Expr RewriteLeafOp(Op expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="PrimFunctionWrapper"/>.
    /// </summary>
    protected virtual Expr RewriteLeafPrimFunctionWrapper(PrimFunctionWrapper expr, TContext context) => RewriteLeafBaseFunction(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="IR.Shape"/>.
    /// </summary>
    protected virtual Expr RewriteLeafShape(IR.Shape expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="TensorConst"/>.
    /// </summary>
    protected virtual Expr RewriteLeafTensorConst(TensorConst expr, TContext context) => RewriteLeafConst(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="IR.Tuple"/>.
    /// </summary>
    protected virtual Expr RewriteLeafTuple(IR.Tuple expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="TupleConst"/>.
    /// </summary>
    protected virtual Expr RewriteLeafTupleConst(TupleConst expr, TContext context) => RewriteLeafConst(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.MemSpan"/>.
    /// </summary>
    protected virtual Expr RewriteLeafMemSpan(TIR.MemSpan expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Var"/>.
    /// </summary>
    protected virtual Expr RewriteLeafVar(Var expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.Block"/>.
    /// </summary>
    protected virtual Expr RewriteLeafBlock(TIR.Block expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.Buffer"/>.
    /// </summary>
    protected virtual Expr RewriteLeafBuffer(TIR.Buffer expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.BufferRegion"/>.
    /// </summary>
    protected virtual Expr RewriteLeafBufferRegion(TIR.BufferRegion expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.For"/>.
    /// </summary>
    protected virtual Expr RewriteLeafFor(TIR.For expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.IfThenElse"/>.
    /// </summary>
    protected virtual Expr RewriteLeafIfThenElse(TIR.IfThenElse expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.Let"/>.
    /// </summary>
    protected virtual Expr RewriteLeafLet(TIR.Let expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.PrimFunction"/>.
    /// </summary>
    protected virtual Expr RewriteLeafPrimFunction(TIR.PrimFunction expr, TContext context) => RewriteLeafBaseFunction(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.Sequential"/>.
    /// </summary>
    protected virtual Expr RewriteLeafSequential(TIR.Sequential expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.Range"/>.
    /// </summary>
    protected virtual Expr RewriteLeafRange(TIR.Range expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.IterVar"/>.
    /// </summary>
    protected virtual Expr RewriteLeafIterVar(TIR.IterVar expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineExpr"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineExpr(Affine.AffineExpr expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineSymbolBase"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineSymbolBase(Affine.AffineSymbolBase expr, TContext context) => RewriteLeafAffineExpr(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineDim"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineDim(Affine.AffineDim expr, TContext context) => RewriteLeafAffineExpr(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineExtent"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineExtent(Affine.AffineExtent expr, TContext context) => RewriteLeafAffineSymbolBase(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineSymbol"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineSymbol(Affine.AffineSymbol expr, TContext context) => RewriteLeafAffineSymbolBase(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineConstant"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineConstant(Affine.AffineConstant expr, TContext context) => RewriteLeafAffineSymbolBase(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineAddBinary"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineAddBinary(Affine.AffineAddBinary expr, TContext context) => RewriteLeafAffineExpr(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineMulBinary"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineMulBinary(Affine.AffineMulBinary expr, TContext context) => RewriteLeafAffineExpr(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineDivBinary"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineDivBinary(Affine.AffineDivBinary expr, TContext context) => RewriteLeafAffineExpr(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineDomain"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineDomain(Affine.AffineDomain expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineRange"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineRange(Affine.AffineRange expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineMap"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineMap(Affine.AffineMap expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineRelation"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineRelation(Affine.AffineRelation expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.Grid"/>.
    /// </summary>
    protected virtual Expr RewriteLeafGrid(Affine.Grid expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.Load"/>.
    /// </summary>
    protected virtual Expr RewriteLeafLoad(Affine.Load expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.For"/>.
    /// </summary>
    protected virtual Expr RewriteLeafFor(Affine.For expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Buffers.BufferOf"/>.
    /// </summary>
    protected virtual Expr RewriteLeafBufferOf(Buffers.BufferOf expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Dimension"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimension(Dimension expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="AsDim"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAsDim(AsDim expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="UnknownDim"/>.
    /// </summary>
    protected virtual Expr RewriteLeafUnknownDim(UnknownDim expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="DimVar"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimVar(DimVar expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="DimConst"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimConst(DimConst expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="DimPower"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimPower(DimPower expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="DimFraction"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimFraction(DimFraction expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="DimRemainder"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimRemainder(DimRemainder expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="DimProduct"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimProduct(DimProduct expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="DimSum"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimSum(DimSum expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="DimAbs"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimAbs(DimAbs expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="DimClamp"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimClamp(DimClamp expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="DimCompareAndSelect"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimCompareAndSelect(DimCompareAndSelect expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="DimMin"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimMin(DimMin expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="DimMax"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimMax(DimMax expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="DimPositive"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimPositive(DimPositive expr, TContext context) => RewriteLeafDimension(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Shapes.Padding"/>.
    /// </summary>
    protected virtual Expr RewriteLeafPadding(Shapes.Padding expr, TContext context) => DefaultRewriteLeaf(expr, context);

    /// <summary>
    /// Rewrite leaf <see cref="Shapes.Paddings"/>.
    /// </summary>
    protected virtual Expr RewriteLeafPaddings(Shapes.Paddings expr, TContext context) => DefaultRewriteLeaf(expr, context);

}

public partial class ExprRewriter
{
    /// <summary>
    /// Rewrite leaf <see cref="BaseFunction"/>.
    /// </summary>
    protected virtual Expr RewriteLeafBaseFunction(BaseFunction expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafBaseFunction(BaseFunction expr, Unit context) => RewriteLeafBaseFunction(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Call"/>.
    /// </summary>
    protected virtual Expr RewriteLeafCall(Call expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafCall(Call expr, Unit context) => RewriteLeafCall(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Const"/>.
    /// </summary>
    protected virtual Expr RewriteLeafConst(Const expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafConst(Const expr, Unit context) => RewriteLeafConst(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Function"/>.
    /// </summary>
    protected virtual Expr RewriteLeafFunction(Function expr) => RewriteLeafBaseFunction(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafFunction(Function expr, Unit context) => RewriteLeafFunction(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Fusion"/>.
    /// </summary>
    protected virtual Expr RewriteLeafFusion(Fusion expr) => RewriteLeafBaseFunction(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafFusion(Fusion expr, Unit context) => RewriteLeafFusion(expr);

    /// <summary>
    /// Rewrite leaf <see cref="If"/>.
    /// </summary>
    protected virtual Expr RewriteLeafIf(If expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafIf(If expr, Unit context) => RewriteLeafIf(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Marker"/>.
    /// </summary>
    protected virtual Expr RewriteLeafMarker(Marker expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafMarker(Marker expr, Unit context) => RewriteLeafMarker(expr);

    /// <summary>
    /// Rewrite leaf <see cref="None"/>.
    /// </summary>
    protected virtual Expr RewriteLeafNone(None expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafNone(None expr, Unit context) => RewriteLeafNone(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Op"/>.
    /// </summary>
    protected virtual Expr RewriteLeafOp(Op expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafOp(Op expr, Unit context) => RewriteLeafOp(expr);

    /// <summary>
    /// Rewrite leaf <see cref="PrimFunctionWrapper"/>.
    /// </summary>
    protected virtual Expr RewriteLeafPrimFunctionWrapper(PrimFunctionWrapper expr) => RewriteLeafBaseFunction(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafPrimFunctionWrapper(PrimFunctionWrapper expr, Unit context) => RewriteLeafPrimFunctionWrapper(expr);

    /// <summary>
    /// Rewrite leaf <see cref="IR.Shape"/>.
    /// </summary>
    protected virtual Expr RewriteLeafShape(IR.Shape expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafShape(IR.Shape expr, Unit context) => RewriteLeafShape(expr);

    /// <summary>
    /// Rewrite leaf <see cref="TensorConst"/>.
    /// </summary>
    protected virtual Expr RewriteLeafTensorConst(TensorConst expr) => RewriteLeafConst(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafTensorConst(TensorConst expr, Unit context) => RewriteLeafTensorConst(expr);

    /// <summary>
    /// Rewrite leaf <see cref="IR.Tuple"/>.
    /// </summary>
    protected virtual Expr RewriteLeafTuple(IR.Tuple expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafTuple(IR.Tuple expr, Unit context) => RewriteLeafTuple(expr);

    /// <summary>
    /// Rewrite leaf <see cref="TupleConst"/>.
    /// </summary>
    protected virtual Expr RewriteLeafTupleConst(TupleConst expr) => RewriteLeafConst(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafTupleConst(TupleConst expr, Unit context) => RewriteLeafTupleConst(expr);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.MemSpan"/>.
    /// </summary>
    protected virtual Expr RewriteLeafMemSpan(TIR.MemSpan expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafMemSpan(TIR.MemSpan expr, Unit context) => RewriteLeafMemSpan(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Var"/>.
    /// </summary>
    protected virtual Expr RewriteLeafVar(Var expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafVar(Var expr, Unit context) => RewriteLeafVar(expr);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.Block"/>.
    /// </summary>
    protected virtual Expr RewriteLeafBlock(TIR.Block expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafBlock(TIR.Block expr, Unit context) => RewriteLeafBlock(expr);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.Buffer"/>.
    /// </summary>
    protected virtual Expr RewriteLeafBuffer(TIR.Buffer expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafBuffer(TIR.Buffer expr, Unit context) => RewriteLeafBuffer(expr);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.BufferRegion"/>.
    /// </summary>
    protected virtual Expr RewriteLeafBufferRegion(TIR.BufferRegion expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafBufferRegion(TIR.BufferRegion expr, Unit context) => RewriteLeafBufferRegion(expr);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.For"/>.
    /// </summary>
    protected virtual Expr RewriteLeafFor(TIR.For expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafFor(TIR.For expr, Unit context) => RewriteLeafFor(expr);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.IfThenElse"/>.
    /// </summary>
    protected virtual Expr RewriteLeafIfThenElse(TIR.IfThenElse expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafIfThenElse(TIR.IfThenElse expr, Unit context) => RewriteLeafIfThenElse(expr);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.Let"/>.
    /// </summary>
    protected virtual Expr RewriteLeafLet(TIR.Let expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafLet(TIR.Let expr, Unit context) => RewriteLeafLet(expr);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.PrimFunction"/>.
    /// </summary>
    protected virtual Expr RewriteLeafPrimFunction(TIR.PrimFunction expr) => RewriteLeafBaseFunction(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafPrimFunction(TIR.PrimFunction expr, Unit context) => RewriteLeafPrimFunction(expr);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.Sequential"/>.
    /// </summary>
    protected virtual Expr RewriteLeafSequential(TIR.Sequential expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafSequential(TIR.Sequential expr, Unit context) => RewriteLeafSequential(expr);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.Range"/>.
    /// </summary>
    protected virtual Expr RewriteLeafRange(TIR.Range expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafRange(TIR.Range expr, Unit context) => RewriteLeafRange(expr);

    /// <summary>
    /// Rewrite leaf <see cref="TIR.IterVar"/>.
    /// </summary>
    protected virtual Expr RewriteLeafIterVar(TIR.IterVar expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafIterVar(TIR.IterVar expr, Unit context) => RewriteLeafIterVar(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineExpr"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineExpr(Affine.AffineExpr expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafAffineExpr(Affine.AffineExpr expr, Unit context) => RewriteLeafAffineExpr(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineSymbolBase"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineSymbolBase(Affine.AffineSymbolBase expr) => RewriteLeafAffineExpr(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafAffineSymbolBase(Affine.AffineSymbolBase expr, Unit context) => RewriteLeafAffineSymbolBase(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineDim"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineDim(Affine.AffineDim expr) => RewriteLeafAffineExpr(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafAffineDim(Affine.AffineDim expr, Unit context) => RewriteLeafAffineDim(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineExtent"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineExtent(Affine.AffineExtent expr) => RewriteLeafAffineSymbolBase(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafAffineExtent(Affine.AffineExtent expr, Unit context) => RewriteLeafAffineExtent(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineSymbol"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineSymbol(Affine.AffineSymbol expr) => RewriteLeafAffineSymbolBase(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafAffineSymbol(Affine.AffineSymbol expr, Unit context) => RewriteLeafAffineSymbol(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineConstant"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineConstant(Affine.AffineConstant expr) => RewriteLeafAffineSymbolBase(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafAffineConstant(Affine.AffineConstant expr, Unit context) => RewriteLeafAffineConstant(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineAddBinary"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineAddBinary(Affine.AffineAddBinary expr) => RewriteLeafAffineExpr(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafAffineAddBinary(Affine.AffineAddBinary expr, Unit context) => RewriteLeafAffineAddBinary(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineMulBinary"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineMulBinary(Affine.AffineMulBinary expr) => RewriteLeafAffineExpr(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafAffineMulBinary(Affine.AffineMulBinary expr, Unit context) => RewriteLeafAffineMulBinary(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineDivBinary"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineDivBinary(Affine.AffineDivBinary expr) => RewriteLeafAffineExpr(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafAffineDivBinary(Affine.AffineDivBinary expr, Unit context) => RewriteLeafAffineDivBinary(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineDomain"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineDomain(Affine.AffineDomain expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafAffineDomain(Affine.AffineDomain expr, Unit context) => RewriteLeafAffineDomain(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineRange"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineRange(Affine.AffineRange expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafAffineRange(Affine.AffineRange expr, Unit context) => RewriteLeafAffineRange(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineMap"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineMap(Affine.AffineMap expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafAffineMap(Affine.AffineMap expr, Unit context) => RewriteLeafAffineMap(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.AffineRelation"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAffineRelation(Affine.AffineRelation expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafAffineRelation(Affine.AffineRelation expr, Unit context) => RewriteLeafAffineRelation(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.Grid"/>.
    /// </summary>
    protected virtual Expr RewriteLeafGrid(Affine.Grid expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafGrid(Affine.Grid expr, Unit context) => RewriteLeafGrid(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.Load"/>.
    /// </summary>
    protected virtual Expr RewriteLeafLoad(Affine.Load expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafLoad(Affine.Load expr, Unit context) => RewriteLeafLoad(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Affine.For"/>.
    /// </summary>
    protected virtual Expr RewriteLeafFor(Affine.For expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafFor(Affine.For expr, Unit context) => RewriteLeafFor(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Buffers.BufferOf"/>.
    /// </summary>
    protected virtual Expr RewriteLeafBufferOf(Buffers.BufferOf expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafBufferOf(Buffers.BufferOf expr, Unit context) => RewriteLeafBufferOf(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Dimension"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimension(Dimension expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafDimension(Dimension expr, Unit context) => RewriteLeafDimension(expr);

    /// <summary>
    /// Rewrite leaf <see cref="AsDim"/>.
    /// </summary>
    protected virtual Expr RewriteLeafAsDim(AsDim expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafAsDim(AsDim expr, Unit context) => RewriteLeafAsDim(expr);

    /// <summary>
    /// Rewrite leaf <see cref="UnknownDim"/>.
    /// </summary>
    protected virtual Expr RewriteLeafUnknownDim(UnknownDim expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafUnknownDim(UnknownDim expr, Unit context) => RewriteLeafUnknownDim(expr);

    /// <summary>
    /// Rewrite leaf <see cref="DimVar"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimVar(DimVar expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafDimVar(DimVar expr, Unit context) => RewriteLeafDimVar(expr);

    /// <summary>
    /// Rewrite leaf <see cref="DimConst"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimConst(DimConst expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafDimConst(DimConst expr, Unit context) => RewriteLeafDimConst(expr);

    /// <summary>
    /// Rewrite leaf <see cref="DimPower"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimPower(DimPower expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafDimPower(DimPower expr, Unit context) => RewriteLeafDimPower(expr);

    /// <summary>
    /// Rewrite leaf <see cref="DimFraction"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimFraction(DimFraction expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafDimFraction(DimFraction expr, Unit context) => RewriteLeafDimFraction(expr);

    /// <summary>
    /// Rewrite leaf <see cref="DimRemainder"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimRemainder(DimRemainder expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafDimRemainder(DimRemainder expr, Unit context) => RewriteLeafDimRemainder(expr);

    /// <summary>
    /// Rewrite leaf <see cref="DimProduct"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimProduct(DimProduct expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafDimProduct(DimProduct expr, Unit context) => RewriteLeafDimProduct(expr);

    /// <summary>
    /// Rewrite leaf <see cref="DimSum"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimSum(DimSum expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafDimSum(DimSum expr, Unit context) => RewriteLeafDimSum(expr);

    /// <summary>
    /// Rewrite leaf <see cref="DimAbs"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimAbs(DimAbs expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafDimAbs(DimAbs expr, Unit context) => RewriteLeafDimAbs(expr);

    /// <summary>
    /// Rewrite leaf <see cref="DimClamp"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimClamp(DimClamp expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafDimClamp(DimClamp expr, Unit context) => RewriteLeafDimClamp(expr);

    /// <summary>
    /// Rewrite leaf <see cref="DimCompareAndSelect"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimCompareAndSelect(DimCompareAndSelect expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafDimCompareAndSelect(DimCompareAndSelect expr, Unit context) => RewriteLeafDimCompareAndSelect(expr);

    /// <summary>
    /// Rewrite leaf <see cref="DimMin"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimMin(DimMin expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafDimMin(DimMin expr, Unit context) => RewriteLeafDimMin(expr);

    /// <summary>
    /// Rewrite leaf <see cref="DimMax"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimMax(DimMax expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafDimMax(DimMax expr, Unit context) => RewriteLeafDimMax(expr);

    /// <summary>
    /// Rewrite leaf <see cref="DimPositive"/>.
    /// </summary>
    protected virtual Expr RewriteLeafDimPositive(DimPositive expr) => RewriteLeafDimension(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafDimPositive(DimPositive expr, Unit context) => RewriteLeafDimPositive(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Shapes.Padding"/>.
    /// </summary>
    protected virtual Expr RewriteLeafPadding(Shapes.Padding expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafPadding(Shapes.Padding expr, Unit context) => RewriteLeafPadding(expr);

    /// <summary>
    /// Rewrite leaf <see cref="Shapes.Paddings"/>.
    /// </summary>
    protected virtual Expr RewriteLeafPaddings(Shapes.Paddings expr) => DefaultRewriteLeaf(expr);

    /// <inheritdoc />
    protected sealed override Expr RewriteLeafPaddings(Shapes.Paddings expr, Unit context) => RewriteLeafPaddings(expr);

}
