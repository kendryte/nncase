<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="IRListParser.tt"#>
//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4 template.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Reactive;

namespace Nncase.IR;

public partial class ExprVisitor<TExprResult, TTypeResult, TContext>
{
<#
foreach (var ir in irs.Where(x => x.IsDerived))
{
#>
    /// <inheritdoc />
    protected internal override TExprResult Visit<#=ir.Name#>(<#=ir.Namespace#><#=ir.Name#> expr, TContext context)
    {
<#
    var fieldIdent = ir.IsFunction ? "    " : string.Empty;
    if (ir.IsFunction)
    {
#>
        if (CanVisitFunctionBody(expr))
        {
<#
    }
#>
        <#=fieldIdent#>VisitOperands(expr, context);
<#

    if (ir.IsFunction)
    {
#>
        }

<#
    }
#>
        return VisitLeaf<#=ir.Name#>(expr, context);
    }

<#
}
#>
<#
foreach (var ir in irs)
{
    var func = ir.VisitBase == "Default" ? "DefaultVisitLeaf" : $"VisitLeaf{ir.VisitBase}";
#>
    /// <summary>
    /// Visit leaf <see cref="<#=ir.Namespace#><#=ir.Name#>"/>.
    /// </summary>
    protected virtual TExprResult VisitLeaf<#=ir.Name#>(<#=ir.Namespace#><#=ir.Name#> expr, TContext context) => <#=func#>(expr, context);

<#
}
#>
}

public partial class ExprVisitor<TExprResult, TTypeResult>
{
<#
foreach (var ir in irs.Where(x => x.IsDerived))
{
#>
    /// <summary>
    /// Visit <see cref="<#=ir.Namespace#><#=ir.Name#>"/>.
    /// </summary>
    internal protected virtual TExprResult Visit<#=ir.Name#>(<#=ir.Namespace#><#=ir.Name#> expr) => base.Visit<#=ir.Name#>(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult Visit<#=ir.Name#>(<#=ir.Namespace#><#=ir.Name#> expr, Unit context) => Visit<#=ir.Name#>(expr);
<#
}
#>
<#
foreach (var ir in irs)
{
    var func = ir.VisitBase == "Default" ? "DefaultVisitLeaf" : $"VisitLeaf{ir.VisitBase}";
#>
    /// <summary>
    /// Visit leaf <see cref="<#=ir.Namespace#><#=ir.Name#>"/>.
    /// </summary>
    protected virtual TExprResult VisitLeaf<#=ir.Name#>(<#=ir.Namespace#><#=ir.Name#> expr) => base.VisitLeaf<#=ir.Name#>(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeaf<#=ir.Name#>(<#=ir.Namespace#><#=ir.Name#> expr, Unit context) => VisitLeaf<#=ir.Name#>(expr);

<#
}
#>
}
