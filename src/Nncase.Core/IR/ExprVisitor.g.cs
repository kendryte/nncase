//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4 template.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Reactive;

namespace Nncase.IR;

public partial class ExprVisitor<TExprResult, TTypeResult, TContext>
{
    /// <inheritdoc />
    protected internal override TExprResult VisitCall(Call expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafCall(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitFunction(Function expr, TContext context)
    {
        if (CanVisitFunctionBody(expr))
        {
            VisitOperands(expr, context);
        }

        return VisitLeafFunction(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitFusion(Fusion expr, TContext context)
    {
        if (CanVisitFunctionBody(expr))
        {
            VisitOperands(expr, context);
        }

        return VisitLeafFusion(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitIf(If expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafIf(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitMarker(Marker expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafMarker(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitNone(None expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafNone(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitOp(Op expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafOp(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitPrimFunctionWrapper(PrimFunctionWrapper expr, TContext context)
    {
        if (CanVisitFunctionBody(expr))
        {
            VisitOperands(expr, context);
        }

        return VisitLeafPrimFunctionWrapper(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitTensorConst(TensorConst expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafTensorConst(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitTuple(IR.Tuple expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafTuple(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitTupleConst(TupleConst expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafTupleConst(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitMemSpan(TIR.MemSpan expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafMemSpan(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitVar(Var expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafVar(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitBlock(TIR.Block expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafBlock(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitBuffer(TIR.Buffer expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafBuffer(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitBufferRegion(TIR.BufferRegion expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafBufferRegion(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitFor(TIR.For expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafFor(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitIfThenElse(TIR.IfThenElse expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafIfThenElse(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitLet(TIR.Let expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafLet(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitPrimFunction(TIR.PrimFunction expr, TContext context)
    {
        if (CanVisitFunctionBody(expr))
        {
            VisitOperands(expr, context);
        }

        return VisitLeafPrimFunction(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitSequential(TIR.Sequential expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafSequential(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitRange(TIR.Range expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafRange(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitIterVar(TIR.IterVar expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafIterVar(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitAffineDim(Affine.AffineDim expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafAffineDim(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitAffineExtent(Affine.AffineExtent expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafAffineExtent(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitAffineSymbol(Affine.AffineSymbol expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafAffineSymbol(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitAffineConstant(Affine.AffineConstant expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafAffineConstant(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitAffineAddBinary(Affine.AffineAddBinary expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafAffineAddBinary(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitAffineMulBinary(Affine.AffineMulBinary expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafAffineMulBinary(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitAffineDivBinary(Affine.AffineDivBinary expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafAffineDivBinary(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitAffineDomain(Affine.AffineDomain expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafAffineDomain(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitAffineRange(Affine.AffineRange expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafAffineRange(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitAffineMap(Affine.AffineMap expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafAffineMap(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitAffineRelation(Affine.AffineRelation expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafAffineRelation(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitGrid(Affine.Grid expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafGrid(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitLoad(Affine.Load expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafLoad(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitFor(Affine.For expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafFor(expr, context);
    }

    /// <inheritdoc />
    protected internal override TExprResult VisitBufferOf(Buffers.BufferOf expr, TContext context)
    {
        VisitOperands(expr, context);
        return VisitLeafBufferOf(expr, context);
    }

    /// <summary>
    /// Visit leaf <see cref="BaseFunction"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafBaseFunction(BaseFunction expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Call"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafCall(Call expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Const"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafConst(Const expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Function"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafFunction(Function expr, TContext context) => VisitLeafBaseFunction(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Fusion"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafFusion(Fusion expr, TContext context) => VisitLeafBaseFunction(expr, context);

    /// <summary>
    /// Visit leaf <see cref="If"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafIf(If expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Marker"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafMarker(Marker expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="None"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafNone(None expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Op"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafOp(Op expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="PrimFunctionWrapper"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafPrimFunctionWrapper(PrimFunctionWrapper expr, TContext context) => VisitLeafBaseFunction(expr, context);

    /// <summary>
    /// Visit leaf <see cref="TensorConst"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafTensorConst(TensorConst expr, TContext context) => VisitLeafConst(expr, context);

    /// <summary>
    /// Visit leaf <see cref="IR.Tuple"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafTuple(IR.Tuple expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="TupleConst"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafTupleConst(TupleConst expr, TContext context) => VisitLeafConst(expr, context);

    /// <summary>
    /// Visit leaf <see cref="TIR.MemSpan"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafMemSpan(TIR.MemSpan expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Var"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafVar(Var expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="TIR.Block"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafBlock(TIR.Block expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="TIR.Buffer"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafBuffer(TIR.Buffer expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="TIR.BufferRegion"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafBufferRegion(TIR.BufferRegion expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="TIR.For"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafFor(TIR.For expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="TIR.IfThenElse"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafIfThenElse(TIR.IfThenElse expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="TIR.Let"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafLet(TIR.Let expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="TIR.PrimFunction"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafPrimFunction(TIR.PrimFunction expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="TIR.Sequential"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafSequential(TIR.Sequential expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="TIR.Range"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafRange(TIR.Range expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="TIR.IterVar"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafIterVar(TIR.IterVar expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineExpr"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineExpr(Affine.AffineExpr expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineSymbolBase"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineSymbolBase(Affine.AffineSymbolBase expr, TContext context) => VisitLeafAffineExpr(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineDim"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineDim(Affine.AffineDim expr, TContext context) => VisitLeafAffineExpr(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineExtent"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineExtent(Affine.AffineExtent expr, TContext context) => VisitLeafAffineSymbolBase(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineSymbol"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineSymbol(Affine.AffineSymbol expr, TContext context) => VisitLeafAffineSymbolBase(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineConstant"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineConstant(Affine.AffineConstant expr, TContext context) => VisitLeafAffineSymbolBase(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineAddBinary"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineAddBinary(Affine.AffineAddBinary expr, TContext context) => VisitLeafAffineExpr(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineMulBinary"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineMulBinary(Affine.AffineMulBinary expr, TContext context) => VisitLeafAffineExpr(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineDivBinary"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineDivBinary(Affine.AffineDivBinary expr, TContext context) => VisitLeafAffineExpr(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineDomain"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineDomain(Affine.AffineDomain expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineRange"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineRange(Affine.AffineRange expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineMap"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineMap(Affine.AffineMap expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineRelation"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineRelation(Affine.AffineRelation expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.Grid"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafGrid(Affine.Grid expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.Load"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafLoad(Affine.Load expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Affine.For"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafFor(Affine.For expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="Buffers.BufferOf"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafBufferOf(Buffers.BufferOf expr, TContext context) => DefaultVisitLeaf(expr, context);

}

public partial class ExprVisitor<TExprResult, TTypeResult>
{
    /// <summary>
    /// Visit <see cref="Call"/>.
    /// </summary>
    internal protected virtual TExprResult VisitCall(Call expr) => base.VisitCall(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitCall(Call expr, Unit context) => VisitCall(expr);
    /// <summary>
    /// Visit <see cref="Function"/>.
    /// </summary>
    internal protected virtual TExprResult VisitFunction(Function expr) => base.VisitFunction(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitFunction(Function expr, Unit context) => VisitFunction(expr);
    /// <summary>
    /// Visit <see cref="Fusion"/>.
    /// </summary>
    internal protected virtual TExprResult VisitFusion(Fusion expr) => base.VisitFusion(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitFusion(Fusion expr, Unit context) => VisitFusion(expr);
    /// <summary>
    /// Visit <see cref="If"/>.
    /// </summary>
    internal protected virtual TExprResult VisitIf(If expr) => base.VisitIf(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitIf(If expr, Unit context) => VisitIf(expr);
    /// <summary>
    /// Visit <see cref="Marker"/>.
    /// </summary>
    internal protected virtual TExprResult VisitMarker(Marker expr) => base.VisitMarker(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitMarker(Marker expr, Unit context) => VisitMarker(expr);
    /// <summary>
    /// Visit <see cref="None"/>.
    /// </summary>
    internal protected virtual TExprResult VisitNone(None expr) => base.VisitNone(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitNone(None expr, Unit context) => VisitNone(expr);
    /// <summary>
    /// Visit <see cref="Op"/>.
    /// </summary>
    internal protected virtual TExprResult VisitOp(Op expr) => base.VisitOp(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitOp(Op expr, Unit context) => VisitOp(expr);
    /// <summary>
    /// Visit <see cref="PrimFunctionWrapper"/>.
    /// </summary>
    internal protected virtual TExprResult VisitPrimFunctionWrapper(PrimFunctionWrapper expr) => base.VisitPrimFunctionWrapper(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitPrimFunctionWrapper(PrimFunctionWrapper expr, Unit context) => VisitPrimFunctionWrapper(expr);
    /// <summary>
    /// Visit <see cref="TensorConst"/>.
    /// </summary>
    internal protected virtual TExprResult VisitTensorConst(TensorConst expr) => base.VisitTensorConst(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitTensorConst(TensorConst expr, Unit context) => VisitTensorConst(expr);
    /// <summary>
    /// Visit <see cref="IR.Tuple"/>.
    /// </summary>
    internal protected virtual TExprResult VisitTuple(IR.Tuple expr) => base.VisitTuple(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitTuple(IR.Tuple expr, Unit context) => VisitTuple(expr);
    /// <summary>
    /// Visit <see cref="TupleConst"/>.
    /// </summary>
    internal protected virtual TExprResult VisitTupleConst(TupleConst expr) => base.VisitTupleConst(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitTupleConst(TupleConst expr, Unit context) => VisitTupleConst(expr);
    /// <summary>
    /// Visit <see cref="TIR.MemSpan"/>.
    /// </summary>
    internal protected virtual TExprResult VisitMemSpan(TIR.MemSpan expr) => base.VisitMemSpan(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitMemSpan(TIR.MemSpan expr, Unit context) => VisitMemSpan(expr);
    /// <summary>
    /// Visit <see cref="Var"/>.
    /// </summary>
    internal protected virtual TExprResult VisitVar(Var expr) => base.VisitVar(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitVar(Var expr, Unit context) => VisitVar(expr);
    /// <summary>
    /// Visit <see cref="TIR.Block"/>.
    /// </summary>
    internal protected virtual TExprResult VisitBlock(TIR.Block expr) => base.VisitBlock(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitBlock(TIR.Block expr, Unit context) => VisitBlock(expr);
    /// <summary>
    /// Visit <see cref="TIR.Buffer"/>.
    /// </summary>
    internal protected virtual TExprResult VisitBuffer(TIR.Buffer expr) => base.VisitBuffer(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitBuffer(TIR.Buffer expr, Unit context) => VisitBuffer(expr);
    /// <summary>
    /// Visit <see cref="TIR.BufferRegion"/>.
    /// </summary>
    internal protected virtual TExprResult VisitBufferRegion(TIR.BufferRegion expr) => base.VisitBufferRegion(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitBufferRegion(TIR.BufferRegion expr, Unit context) => VisitBufferRegion(expr);
    /// <summary>
    /// Visit <see cref="TIR.For"/>.
    /// </summary>
    internal protected virtual TExprResult VisitFor(TIR.For expr) => base.VisitFor(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitFor(TIR.For expr, Unit context) => VisitFor(expr);
    /// <summary>
    /// Visit <see cref="TIR.IfThenElse"/>.
    /// </summary>
    internal protected virtual TExprResult VisitIfThenElse(TIR.IfThenElse expr) => base.VisitIfThenElse(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitIfThenElse(TIR.IfThenElse expr, Unit context) => VisitIfThenElse(expr);
    /// <summary>
    /// Visit <see cref="TIR.Let"/>.
    /// </summary>
    internal protected virtual TExprResult VisitLet(TIR.Let expr) => base.VisitLet(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitLet(TIR.Let expr, Unit context) => VisitLet(expr);
    /// <summary>
    /// Visit <see cref="TIR.PrimFunction"/>.
    /// </summary>
    internal protected virtual TExprResult VisitPrimFunction(TIR.PrimFunction expr) => base.VisitPrimFunction(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitPrimFunction(TIR.PrimFunction expr, Unit context) => VisitPrimFunction(expr);
    /// <summary>
    /// Visit <see cref="TIR.Sequential"/>.
    /// </summary>
    internal protected virtual TExprResult VisitSequential(TIR.Sequential expr) => base.VisitSequential(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitSequential(TIR.Sequential expr, Unit context) => VisitSequential(expr);
    /// <summary>
    /// Visit <see cref="TIR.Range"/>.
    /// </summary>
    internal protected virtual TExprResult VisitRange(TIR.Range expr) => base.VisitRange(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitRange(TIR.Range expr, Unit context) => VisitRange(expr);
    /// <summary>
    /// Visit <see cref="TIR.IterVar"/>.
    /// </summary>
    internal protected virtual TExprResult VisitIterVar(TIR.IterVar expr) => base.VisitIterVar(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitIterVar(TIR.IterVar expr, Unit context) => VisitIterVar(expr);
    /// <summary>
    /// Visit <see cref="Affine.AffineDim"/>.
    /// </summary>
    internal protected virtual TExprResult VisitAffineDim(Affine.AffineDim expr) => base.VisitAffineDim(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitAffineDim(Affine.AffineDim expr, Unit context) => VisitAffineDim(expr);
    /// <summary>
    /// Visit <see cref="Affine.AffineExtent"/>.
    /// </summary>
    internal protected virtual TExprResult VisitAffineExtent(Affine.AffineExtent expr) => base.VisitAffineExtent(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitAffineExtent(Affine.AffineExtent expr, Unit context) => VisitAffineExtent(expr);
    /// <summary>
    /// Visit <see cref="Affine.AffineSymbol"/>.
    /// </summary>
    internal protected virtual TExprResult VisitAffineSymbol(Affine.AffineSymbol expr) => base.VisitAffineSymbol(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitAffineSymbol(Affine.AffineSymbol expr, Unit context) => VisitAffineSymbol(expr);
    /// <summary>
    /// Visit <see cref="Affine.AffineConstant"/>.
    /// </summary>
    internal protected virtual TExprResult VisitAffineConstant(Affine.AffineConstant expr) => base.VisitAffineConstant(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitAffineConstant(Affine.AffineConstant expr, Unit context) => VisitAffineConstant(expr);
    /// <summary>
    /// Visit <see cref="Affine.AffineAddBinary"/>.
    /// </summary>
    internal protected virtual TExprResult VisitAffineAddBinary(Affine.AffineAddBinary expr) => base.VisitAffineAddBinary(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitAffineAddBinary(Affine.AffineAddBinary expr, Unit context) => VisitAffineAddBinary(expr);
    /// <summary>
    /// Visit <see cref="Affine.AffineMulBinary"/>.
    /// </summary>
    internal protected virtual TExprResult VisitAffineMulBinary(Affine.AffineMulBinary expr) => base.VisitAffineMulBinary(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitAffineMulBinary(Affine.AffineMulBinary expr, Unit context) => VisitAffineMulBinary(expr);
    /// <summary>
    /// Visit <see cref="Affine.AffineDivBinary"/>.
    /// </summary>
    internal protected virtual TExprResult VisitAffineDivBinary(Affine.AffineDivBinary expr) => base.VisitAffineDivBinary(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitAffineDivBinary(Affine.AffineDivBinary expr, Unit context) => VisitAffineDivBinary(expr);
    /// <summary>
    /// Visit <see cref="Affine.AffineDomain"/>.
    /// </summary>
    internal protected virtual TExprResult VisitAffineDomain(Affine.AffineDomain expr) => base.VisitAffineDomain(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitAffineDomain(Affine.AffineDomain expr, Unit context) => VisitAffineDomain(expr);
    /// <summary>
    /// Visit <see cref="Affine.AffineRange"/>.
    /// </summary>
    internal protected virtual TExprResult VisitAffineRange(Affine.AffineRange expr) => base.VisitAffineRange(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitAffineRange(Affine.AffineRange expr, Unit context) => VisitAffineRange(expr);
    /// <summary>
    /// Visit <see cref="Affine.AffineMap"/>.
    /// </summary>
    internal protected virtual TExprResult VisitAffineMap(Affine.AffineMap expr) => base.VisitAffineMap(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitAffineMap(Affine.AffineMap expr, Unit context) => VisitAffineMap(expr);
    /// <summary>
    /// Visit <see cref="Affine.AffineRelation"/>.
    /// </summary>
    internal protected virtual TExprResult VisitAffineRelation(Affine.AffineRelation expr) => base.VisitAffineRelation(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitAffineRelation(Affine.AffineRelation expr, Unit context) => VisitAffineRelation(expr);
    /// <summary>
    /// Visit <see cref="Affine.Grid"/>.
    /// </summary>
    internal protected virtual TExprResult VisitGrid(Affine.Grid expr) => base.VisitGrid(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitGrid(Affine.Grid expr, Unit context) => VisitGrid(expr);
    /// <summary>
    /// Visit <see cref="Affine.Load"/>.
    /// </summary>
    internal protected virtual TExprResult VisitLoad(Affine.Load expr) => base.VisitLoad(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitLoad(Affine.Load expr, Unit context) => VisitLoad(expr);
    /// <summary>
    /// Visit <see cref="Affine.For"/>.
    /// </summary>
    internal protected virtual TExprResult VisitFor(Affine.For expr) => base.VisitFor(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitFor(Affine.For expr, Unit context) => VisitFor(expr);
    /// <summary>
    /// Visit <see cref="Buffers.BufferOf"/>.
    /// </summary>
    internal protected virtual TExprResult VisitBufferOf(Buffers.BufferOf expr) => base.VisitBufferOf(expr, default);
    
    /// <inheritdoc/>
    internal protected sealed override TExprResult VisitBufferOf(Buffers.BufferOf expr, Unit context) => VisitBufferOf(expr);
    /// <summary>
    /// Visit leaf <see cref="BaseFunction"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafBaseFunction(BaseFunction expr) => base.VisitLeafBaseFunction(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafBaseFunction(BaseFunction expr, Unit context) => VisitLeafBaseFunction(expr);

    /// <summary>
    /// Visit leaf <see cref="Call"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafCall(Call expr) => base.VisitLeafCall(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafCall(Call expr, Unit context) => VisitLeafCall(expr);

    /// <summary>
    /// Visit leaf <see cref="Const"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafConst(Const expr) => base.VisitLeafConst(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafConst(Const expr, Unit context) => VisitLeafConst(expr);

    /// <summary>
    /// Visit leaf <see cref="Function"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafFunction(Function expr) => base.VisitLeafFunction(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafFunction(Function expr, Unit context) => VisitLeafFunction(expr);

    /// <summary>
    /// Visit leaf <see cref="Fusion"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafFusion(Fusion expr) => base.VisitLeafFusion(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafFusion(Fusion expr, Unit context) => VisitLeafFusion(expr);

    /// <summary>
    /// Visit leaf <see cref="If"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafIf(If expr) => base.VisitLeafIf(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafIf(If expr, Unit context) => VisitLeafIf(expr);

    /// <summary>
    /// Visit leaf <see cref="Marker"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafMarker(Marker expr) => base.VisitLeafMarker(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafMarker(Marker expr, Unit context) => VisitLeafMarker(expr);

    /// <summary>
    /// Visit leaf <see cref="None"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafNone(None expr) => base.VisitLeafNone(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafNone(None expr, Unit context) => VisitLeafNone(expr);

    /// <summary>
    /// Visit leaf <see cref="Op"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafOp(Op expr) => base.VisitLeafOp(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafOp(Op expr, Unit context) => VisitLeafOp(expr);

    /// <summary>
    /// Visit leaf <see cref="PrimFunctionWrapper"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafPrimFunctionWrapper(PrimFunctionWrapper expr) => base.VisitLeafPrimFunctionWrapper(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafPrimFunctionWrapper(PrimFunctionWrapper expr, Unit context) => VisitLeafPrimFunctionWrapper(expr);

    /// <summary>
    /// Visit leaf <see cref="TensorConst"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafTensorConst(TensorConst expr) => base.VisitLeafTensorConst(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafTensorConst(TensorConst expr, Unit context) => VisitLeafTensorConst(expr);

    /// <summary>
    /// Visit leaf <see cref="IR.Tuple"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafTuple(IR.Tuple expr) => base.VisitLeafTuple(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafTuple(IR.Tuple expr, Unit context) => VisitLeafTuple(expr);

    /// <summary>
    /// Visit leaf <see cref="TupleConst"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafTupleConst(TupleConst expr) => base.VisitLeafTupleConst(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafTupleConst(TupleConst expr, Unit context) => VisitLeafTupleConst(expr);

    /// <summary>
    /// Visit leaf <see cref="TIR.MemSpan"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafMemSpan(TIR.MemSpan expr) => base.VisitLeafMemSpan(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafMemSpan(TIR.MemSpan expr, Unit context) => VisitLeafMemSpan(expr);

    /// <summary>
    /// Visit leaf <see cref="Var"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafVar(Var expr) => base.VisitLeafVar(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafVar(Var expr, Unit context) => VisitLeafVar(expr);

    /// <summary>
    /// Visit leaf <see cref="TIR.Block"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafBlock(TIR.Block expr) => base.VisitLeafBlock(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafBlock(TIR.Block expr, Unit context) => VisitLeafBlock(expr);

    /// <summary>
    /// Visit leaf <see cref="TIR.Buffer"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafBuffer(TIR.Buffer expr) => base.VisitLeafBuffer(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafBuffer(TIR.Buffer expr, Unit context) => VisitLeafBuffer(expr);

    /// <summary>
    /// Visit leaf <see cref="TIR.BufferRegion"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafBufferRegion(TIR.BufferRegion expr) => base.VisitLeafBufferRegion(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafBufferRegion(TIR.BufferRegion expr, Unit context) => VisitLeafBufferRegion(expr);

    /// <summary>
    /// Visit leaf <see cref="TIR.For"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafFor(TIR.For expr) => base.VisitLeafFor(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafFor(TIR.For expr, Unit context) => VisitLeafFor(expr);

    /// <summary>
    /// Visit leaf <see cref="TIR.IfThenElse"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafIfThenElse(TIR.IfThenElse expr) => base.VisitLeafIfThenElse(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafIfThenElse(TIR.IfThenElse expr, Unit context) => VisitLeafIfThenElse(expr);

    /// <summary>
    /// Visit leaf <see cref="TIR.Let"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafLet(TIR.Let expr) => base.VisitLeafLet(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafLet(TIR.Let expr, Unit context) => VisitLeafLet(expr);

    /// <summary>
    /// Visit leaf <see cref="TIR.PrimFunction"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafPrimFunction(TIR.PrimFunction expr) => base.VisitLeafPrimFunction(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafPrimFunction(TIR.PrimFunction expr, Unit context) => VisitLeafPrimFunction(expr);

    /// <summary>
    /// Visit leaf <see cref="TIR.Sequential"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafSequential(TIR.Sequential expr) => base.VisitLeafSequential(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafSequential(TIR.Sequential expr, Unit context) => VisitLeafSequential(expr);

    /// <summary>
    /// Visit leaf <see cref="TIR.Range"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafRange(TIR.Range expr) => base.VisitLeafRange(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafRange(TIR.Range expr, Unit context) => VisitLeafRange(expr);

    /// <summary>
    /// Visit leaf <see cref="TIR.IterVar"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafIterVar(TIR.IterVar expr) => base.VisitLeafIterVar(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafIterVar(TIR.IterVar expr, Unit context) => VisitLeafIterVar(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineExpr"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineExpr(Affine.AffineExpr expr) => base.VisitLeafAffineExpr(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafAffineExpr(Affine.AffineExpr expr, Unit context) => VisitLeafAffineExpr(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineSymbolBase"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineSymbolBase(Affine.AffineSymbolBase expr) => base.VisitLeafAffineSymbolBase(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafAffineSymbolBase(Affine.AffineSymbolBase expr, Unit context) => VisitLeafAffineSymbolBase(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineDim"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineDim(Affine.AffineDim expr) => base.VisitLeafAffineDim(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafAffineDim(Affine.AffineDim expr, Unit context) => VisitLeafAffineDim(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineExtent"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineExtent(Affine.AffineExtent expr) => base.VisitLeafAffineExtent(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafAffineExtent(Affine.AffineExtent expr, Unit context) => VisitLeafAffineExtent(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineSymbol"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineSymbol(Affine.AffineSymbol expr) => base.VisitLeafAffineSymbol(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafAffineSymbol(Affine.AffineSymbol expr, Unit context) => VisitLeafAffineSymbol(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineConstant"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineConstant(Affine.AffineConstant expr) => base.VisitLeafAffineConstant(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafAffineConstant(Affine.AffineConstant expr, Unit context) => VisitLeafAffineConstant(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineAddBinary"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineAddBinary(Affine.AffineAddBinary expr) => base.VisitLeafAffineAddBinary(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafAffineAddBinary(Affine.AffineAddBinary expr, Unit context) => VisitLeafAffineAddBinary(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineMulBinary"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineMulBinary(Affine.AffineMulBinary expr) => base.VisitLeafAffineMulBinary(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafAffineMulBinary(Affine.AffineMulBinary expr, Unit context) => VisitLeafAffineMulBinary(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineDivBinary"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineDivBinary(Affine.AffineDivBinary expr) => base.VisitLeafAffineDivBinary(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafAffineDivBinary(Affine.AffineDivBinary expr, Unit context) => VisitLeafAffineDivBinary(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineDomain"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineDomain(Affine.AffineDomain expr) => base.VisitLeafAffineDomain(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafAffineDomain(Affine.AffineDomain expr, Unit context) => VisitLeafAffineDomain(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineRange"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineRange(Affine.AffineRange expr) => base.VisitLeafAffineRange(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafAffineRange(Affine.AffineRange expr, Unit context) => VisitLeafAffineRange(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineMap"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineMap(Affine.AffineMap expr) => base.VisitLeafAffineMap(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafAffineMap(Affine.AffineMap expr, Unit context) => VisitLeafAffineMap(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.AffineRelation"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineRelation(Affine.AffineRelation expr) => base.VisitLeafAffineRelation(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafAffineRelation(Affine.AffineRelation expr, Unit context) => VisitLeafAffineRelation(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.Grid"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafGrid(Affine.Grid expr) => base.VisitLeafGrid(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafGrid(Affine.Grid expr, Unit context) => VisitLeafGrid(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.Load"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafLoad(Affine.Load expr) => base.VisitLeafLoad(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafLoad(Affine.Load expr, Unit context) => VisitLeafLoad(expr);

    /// <summary>
    /// Visit leaf <see cref="Affine.For"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafFor(Affine.For expr) => base.VisitLeafFor(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafFor(Affine.For expr, Unit context) => VisitLeafFor(expr);

    /// <summary>
    /// Visit leaf <see cref="Buffers.BufferOf"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafBufferOf(Buffers.BufferOf expr) => base.VisitLeafBufferOf(expr, default);
    
    /// <inheritdoc/>
    protected sealed override TExprResult VisitLeafBufferOf(Buffers.BufferOf expr, Unit context) => VisitLeafBufferOf(expr);

}
