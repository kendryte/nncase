//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4 template.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Reactive;

namespace Nncase.IR.Affine;

public partial class AffineExprVisitor<TExprResult, TContext>
{
    /// <inheritdoc />
    internal protected virtual TExprResult VisitAffineDim(AffineDim expr, TContext context)
    {
        return VisitLeafAffineDim(expr, context);
    }

    /// <inheritdoc />
    internal protected virtual TExprResult VisitAffineExtent(AffineExtent expr, TContext context)
    {
        return VisitLeafAffineExtent(expr, context);
    }

    /// <inheritdoc />
    internal protected virtual TExprResult VisitAffineSymbol(AffineSymbol expr, TContext context)
    {
        return VisitLeafAffineSymbol(expr, context);
    }

    /// <inheritdoc />
    internal protected virtual TExprResult VisitAffineConstant(AffineConstant expr, TContext context)
    {
        return VisitLeafAffineConstant(expr, context);
    }

    /// <inheritdoc />
    internal protected virtual TExprResult VisitAffineAddBinary(AffineAddBinary expr, TContext context)
    {
        Visit(expr.Lhs, context);
        Visit(expr.Rhs, context);
        return VisitLeafAffineAddBinary(expr, context);
    }

    /// <inheritdoc />
    internal protected virtual TExprResult VisitAffineMulBinary(AffineMulBinary expr, TContext context)
    {
        Visit(expr.Lhs, context);
        Visit(expr.Rhs, context);
        return VisitLeafAffineMulBinary(expr, context);
    }

    /// <inheritdoc />
    internal protected virtual TExprResult VisitAffineDivBinary(AffineDivBinary expr, TContext context)
    {
        Visit(expr.Lhs, context);
        Visit(expr.Rhs, context);
        return VisitLeafAffineDivBinary(expr, context);
    }

    /// <summary>
    /// Visit leaf <see cref="AffineDim"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineDim(AffineDim expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="AffineExtent"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineExtent(AffineExtent expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="AffineSymbol"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineSymbol(AffineSymbol expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="AffineConstant"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineConstant(AffineConstant expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="AffineAddBinary"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineAddBinary(AffineAddBinary expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="AffineMulBinary"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineMulBinary(AffineMulBinary expr, TContext context) => DefaultVisitLeaf(expr, context);

    /// <summary>
    /// Visit leaf <see cref="AffineDivBinary"/>.
    /// </summary>
    protected virtual TExprResult VisitLeafAffineDivBinary(AffineDivBinary expr, TContext context) => DefaultVisitLeaf(expr, context);

}
