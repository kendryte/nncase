// Copyright (c) Canaan Inc. All rights reserved.
// Licensed under the Apache license. See LICENSE file in the project root for full license information.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.VisualBasic;
using Nncase;
using Nncase.CodeGen;
using Nncase.CodeGen.StackVM;
using Nncase.IR;
using Nncase.Utilities;
using Xunit;

namespace Nncase.Tests.CoreTest;

public class UnitTestStackVMEmitter
{
    [Fact]
    public void TestStackVMEmitterG()
    {
        var stackVmEmitter = new StackVMEmitter(new BinaryWriter(new MemoryStream(), Encoding.UTF8, leaveOpen: true));
        stackVmEmitter.Br(90);
        stackVmEmitter.Add();
        stackVmEmitter.And();
        stackVmEmitter.Break();
        stackVmEmitter.Call(1, 1);
        stackVmEmitter.Ceq();
        stackVmEmitter.Cge();
        stackVmEmitter.Cgt();
        stackVmEmitter.Cle();
        stackVmEmitter.Cne();
        stackVmEmitter.Div();
        stackVmEmitter.Dup();
        stackVmEmitter.Ldarg(1);
        stackVmEmitter.Ldarg0();
        stackVmEmitter.Ldarg1();
        stackVmEmitter.Ldarg2();
        stackVmEmitter.Ldarg3();
        stackVmEmitter.Ldarg4();
        stackVmEmitter.Ldarg5();
        stackVmEmitter.Mul();
        stackVmEmitter.Neg();
        stackVmEmitter.ConvI();
        stackVmEmitter.BrTrue(0);
        stackVmEmitter.CgeU();
        stackVmEmitter.CgtU();
        stackVmEmitter.CleU();
        stackVmEmitter.Clt();
        stackVmEmitter.CltU();
        stackVmEmitter.ConvBR2();
        stackVmEmitter.ConvI1();
        stackVmEmitter.ConvI2();
        stackVmEmitter.ConvR4();
        stackVmEmitter.ConvU();
        stackVmEmitter.ConvU1();
        stackVmEmitter.ConvU2();
        stackVmEmitter.ConvU4();
        stackVmEmitter.ConvI4();
        stackVmEmitter.CusCall(string.Empty, Array.Empty<byte>(), 1);
        stackVmEmitter.DivU();
        stackVmEmitter.ECall(0);
        stackVmEmitter.LdcI4_0();
        stackVmEmitter.LdcI4_1();
        stackVmEmitter.LdcR4(0f);
        stackVmEmitter.LdelemBR2();
        stackVmEmitter.LdelemI();
        stackVmEmitter.LdelemI1();
        stackVmEmitter.LdelemI2();
        stackVmEmitter.LdelemI4();
        stackVmEmitter.LdelemR4();
        stackVmEmitter.LdelemU();
        stackVmEmitter.LdelemU1();
        stackVmEmitter.LdelemU2();
        stackVmEmitter.LdelemU4();
        stackVmEmitter.LdindBR2();
        stackVmEmitter.LdindI();
        stackVmEmitter.LdindI1();
        stackVmEmitter.LdindI2();
        stackVmEmitter.LdindI4();
        stackVmEmitter.LdindR4();
        stackVmEmitter.LdindU();
        stackVmEmitter.LdindU1();
        stackVmEmitter.LdindU2();
        stackVmEmitter.LdindU4();
        stackVmEmitter.LdTupleElem();
        stackVmEmitter.Nop();
        stackVmEmitter.Not();
        stackVmEmitter.Or();
        stackVmEmitter.Pop();
        stackVmEmitter.Rem();
        stackVmEmitter.RemU();
        stackVmEmitter.Ret();
        stackVmEmitter.Shl();
        stackVmEmitter.Shr();
        stackVmEmitter.ShrU();
        stackVmEmitter.StelemBR2();
        stackVmEmitter.StelemI();
        stackVmEmitter.StelemI1();
        stackVmEmitter.StelemI2();
        stackVmEmitter.StelemI4();
        stackVmEmitter.StelemR4();
        stackVmEmitter.StindBR2();
        stackVmEmitter.StindI();
        stackVmEmitter.StindI1();
        stackVmEmitter.StindI2();
        stackVmEmitter.StindI4();
        stackVmEmitter.StindR4();
        stackVmEmitter.Sub();
        stackVmEmitter.Throw();
        stackVmEmitter.Xor();

        var tensorEmitter = new StackVMEmitter.TensorEmitter(stackVmEmitter);
        tensorEmitter.Binary(BinaryOp.Add);
        tensorEmitter.BatchNormalization();
        tensorEmitter.BatchToSpace();
        tensorEmitter.Bitcast(DataTypes.Boolean, DataTypes.Boolean);
        tensorEmitter.Broadcast();
        tensorEmitter.Cast(DataTypes.Float32, CastMode.Exact);
        tensorEmitter.Celu();
        tensorEmitter.Clamp();
        tensorEmitter.Compare(CompareOp.Equal);
        tensorEmitter.Concat();
        tensorEmitter.Condition(true);
        tensorEmitter.ConstantOfShape();
        tensorEmitter.Conv2D(PadMode.Constant);
        tensorEmitter.Conv2DTranspose(PadMode.Constant);
        tensorEmitter.CumSum();
        tensorEmitter.Dequantize(DataTypes.Boolean);
        tensorEmitter.Elu();
        tensorEmitter.Erf();
        tensorEmitter.Expand();
        tensorEmitter.FakeDequantize(DataTypes.Boolean);
        tensorEmitter.FakeQuantize(DataTypes.Boolean);
        tensorEmitter.Flatten();
        tensorEmitter.Gather();
        tensorEmitter.GatherND();
        tensorEmitter.Gelu();
        tensorEmitter.Hardmax();
        tensorEmitter.HardSigmoid();
        tensorEmitter.HardSwish();
        tensorEmitter.InstanceNormalization();
        tensorEmitter.L2Normalization();
        tensorEmitter.LayerNorm(-1, 0f);
        tensorEmitter.LeakyRelu();
        tensorEmitter.LogSoftmax();
        tensorEmitter.LpNormalization();
        tensorEmitter.LRN();
        tensorEmitter.LSTM(LSTMDirection.Bidirectional, LSTMLayout.One, new[] { "tanh" });
        tensorEmitter.MatMul();
        tensorEmitter.Normal(DataTypes.Boolean);
        tensorEmitter.NormalLike(DataTypes.Boolean);
        tensorEmitter.OneHot(OneHotMode.Normal);
        tensorEmitter.Pad(PadMode.Constant);
        tensorEmitter.PRelu();
        tensorEmitter.Prod();
        tensorEmitter.Quantize(DataTypes.Boolean);
        tensorEmitter.QuantParamOf(QuantMode.UnsignedMode);
        tensorEmitter.Range();
        tensorEmitter.RangeOf();
        tensorEmitter.Reduce(ReduceOp.Prod);
        tensorEmitter.ReduceArg(ReduceArgOp.ArgMax, DataTypes.Float32);
        tensorEmitter.ReduceWindow2D(ReduceOp.Prod);
        tensorEmitter.Relu();
        tensorEmitter.Relu6();
        tensorEmitter.Require(string.Empty);
        tensorEmitter.Reshape();
        tensorEmitter.ReverseSequence();
        tensorEmitter.ResizeImage(ImageResizeMode.Bilinear, ImageResizeTransformationMode.Asymmetric, ImageResizeNearestMode.Ceil, false);
        tensorEmitter.Select();
        tensorEmitter.Selu();
        tensorEmitter.ShapeOf();
        tensorEmitter.Sigmoid();
        tensorEmitter.SizeOf();
        tensorEmitter.Slice();
        tensorEmitter.Softmax();
        tensorEmitter.Softplus();
        tensorEmitter.Softsign();
        tensorEmitter.SpaceToBatch();
        tensorEmitter.Split();
        tensorEmitter.Squeeze();
        tensorEmitter.Stack();
        tensorEmitter.Swish();
        tensorEmitter.Tile();
        tensorEmitter.TopK();
        tensorEmitter.Transpose();
        tensorEmitter.Uniform(DataTypes.Float32);
        tensorEmitter.UniformLike(DataTypes.Float32);
        tensorEmitter.Unsqueeze();
        tensorEmitter.Where(false);
    }
}
