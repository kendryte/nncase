// Copyright (c) Canaan Inc. All rights reserved.
// Licensed under the Apache license. See LICENSE file in the project root for full license information.
/* This file is generated by tools/stackvm_gen/CApiGen at 10/25/2024 6:12:16 PM +08:00. */

using System;
using System.Collections.Generic;
using System.CommandLine;
using System.CommandLine.Binding;
using System.CommandLine.Invocation;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using Nncase;
using Nncase.CommandLine;

namespace Nncase.Targets;

public sealed class CpuTargetOptionsCommand : Command
{
    public CpuTargetOptionsCommand(string name)
        : base(name)
    {
        ModelNameOption = new Option<string>(
            name: "--model-name",
            description: "the input model name.",
            getDefaultValue: () => string.Empty);
        Add(ModelNameOption);
        PackingOption = new Option<bool>(
            name: "--packing",
            description: "enable simd layout optimization.",
            getDefaultValue: () => false);
        Add(PackingOption);
        UnifiedMemoryArchOption = new Option<bool>(
            name: "--unified-memory-arch",
            description: "whether Unified Memory Architecture. see https://en.wikipedia.org/wiki/Unified_Memory_Access.",
            getDefaultValue: () => true);
        Add(UnifiedMemoryArchOption);
        MemoryAccessArchOption = new Option<MemoryAccessArchitecture>(
            name: "--memory-access-arch",
            description: "Memory Access Architecture.",
            getDefaultValue: () => MemoryAccessArchitecture.UMA);
        Add(MemoryAccessArchOption);
        NocArchOption = new Option<NocArchitecture>(
            name: "--noc-arch",
            description: "Noc Architecture.",
            getDefaultValue: () => NocArchitecture.Mesh);
        Add(NocArchOption);
        HierarchiesOption = new Option<IEnumerable<int[]>>(
            name: "--hierarchies",
            description: "the distributed hierarchies of hardware. eg. `8,4 4,8` for dynamic cluster search or `4` for fixed hardware.",
            parseArgument: ArgumentParsers.ParseNestedIntArray)
        {
            AllowMultipleArgumentsPerToken = true,
        };
        Add(HierarchiesOption);
        HierarchyNamesOption = new Option<string>(
            name: "--hierarchy-names",
            description: "the name identify of hierarchies.",
            getDefaultValue: () => "b");
        Add(HierarchyNamesOption);
        HierarchySizesOption = new Option<IEnumerable<int>>(
            name: "--hierarchy-sizes",
            description: "the memory capacity of hierarchies.",
            getDefaultValue: () => new int[] { 1073741824 })
        {
            AllowMultipleArgumentsPerToken = true,
        };
        Add(HierarchySizesOption);
        MemoryCapacitiesOption = new Option<IEnumerable<int>>(
            name: "--memory-capacities",
            description: "the memory capacity of single core. eg. `32 64` for sram,main",
            getDefaultValue: () => new int[] { 65536, 2147483647 })
        {
            AllowMultipleArgumentsPerToken = true,
        };
        Add(MemoryCapacitiesOption);
        MemoryBandWidthsOption = new Option<IEnumerable<int>>(
            name: "--memory-bandwidths",
            description: "the memory bandwidth of single core. eg. `64 8` for sram,main",
            getDefaultValue: () => new int[] { 64, 8 })
        {
            AllowMultipleArgumentsPerToken = true,
        };
        Add(MemoryBandWidthsOption);
        DistributedSchemeOption = new Option<string>(
            name: "--distributed--scheme",
            description: "the distributed scheme path.",
            getDefaultValue: () => string.Empty);
        Add(DistributedSchemeOption);
        CustomOpSchemeOption = new Option<string>(
            name: "--custom-op-scheme",
            description: "the custom-op scheme path.",
            getDefaultValue: () => string.Empty);
        Add(CustomOpSchemeOption);
    }

    public Option<string> ModelNameOption { get; }

    public Option<bool> PackingOption { get; }

    public Option<bool> UnifiedMemoryArchOption { get; }

    public Option<MemoryAccessArchitecture> MemoryAccessArchOption { get; }

    public Option<NocArchitecture> NocArchOption { get; }

    public Option<IEnumerable<int[]>> HierarchiesOption { get; }

    public Option<string> HierarchyNamesOption { get; }

    public Option<IEnumerable<int>> HierarchySizesOption { get; }

    public Option<IEnumerable<int>> MemoryCapacitiesOption { get; }

    public Option<IEnumerable<int>> MemoryBandWidthsOption { get; }

    public Option<string> DistributedSchemeOption { get; }

    public Option<string> CustomOpSchemeOption { get; }
}

public sealed class CpuTargetOptionsBinder
{
    private readonly CpuTargetOptionsCommand _cmd;

    public CpuTargetOptionsBinder(CpuTargetOptionsCommand cmd)
    {
        _cmd = cmd;
    }

    public CpuTargetOptions GetBoundValue(InvocationContext context)
    {
        return new CpuTargetOptions()
        {
            ModelName = context.ParseResult.GetValueForOption(_cmd.ModelNameOption)!,
            Packing = context.ParseResult.GetValueForOption(_cmd.PackingOption)!,
            UnifiedMemoryArch = context.ParseResult.GetValueForOption(_cmd.UnifiedMemoryArchOption)!,
            MemoryAccessArch = context.ParseResult.GetValueForOption(_cmd.MemoryAccessArchOption)!,
            NocArch = context.ParseResult.GetValueForOption(_cmd.NocArchOption)!,
            Hierarchies = context.ParseResult.GetValueForOption(_cmd.HierarchiesOption)!.ToArray(),
            HierarchyNames = context.ParseResult.GetValueForOption(_cmd.HierarchyNamesOption)!,
            HierarchySizes = context.ParseResult.GetValueForOption(_cmd.HierarchySizesOption)!.ToArray(),
            MemoryCapacities = context.ParseResult.GetValueForOption(_cmd.MemoryCapacitiesOption)!.ToArray(),
            MemoryBandWidths = context.ParseResult.GetValueForOption(_cmd.MemoryBandWidthsOption)!.ToArray(),
            DistributedScheme = context.ParseResult.GetValueForOption(_cmd.DistributedSchemeOption)!,
            CustomOpScheme = context.ParseResult.GetValueForOption(_cmd.CustomOpSchemeOption)!,
        };
    }
}
