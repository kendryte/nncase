# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - '*'

jobs:
- job: Linux
  timeoutInMinutes: 0
  pool:
    vmImage: 'ubuntu-16.04'

  variables:
    CC: gcc-8
    CXX: g++-8

  steps:
  - checkout: self
    submodules: true

  - script: |
      sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
      sudo apt-get update -y
      sudo apt-get install g++-8 -y
    displayName: 'Install GNU C++ compiler'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7' 
      addToPath: true 
      architecture: 'x64'

  - script: |
      pip install six==1.12 conan==1.21.1 tensorflow==2.0.0 matplotlib pillow onnxruntime
      pip install torch==1.4.0+cpu torchvision==0.5.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
    displayName: 'Install Conan'

  - script: |
      mkdir out && cd out
      cmake .. -DNNCASE_TARGET=k210 -DCMAKE_BUILD_TYPE=Release
      make -j
      strip bin/ncc
    displayName: 'Build'

  - script: |
      pip install pytest
      pytest tests --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'Test'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: 'out/bin' 
      includeRootFolder: false 
      archiveType: 'tar' # Options: zip, 7z, tar, wim
      tarCompression: 'xz' # Optional. Options: gz, bz2, xz, none
      archiveFile: '$(Build.ArtifactStagingDirectory)/ncc_linux_x86_64.tar.xz' 
      replaceExistingArchive: true 
      verbose: true
    displayName: 'Publish'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)/ncc_linux_x86_64.tar.xz
      artifactName: ncc_linux_x86_64

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'

- job: Windows
  timeoutInMinutes: 0
  pool:
    vmImage: 'windows-2019'
  steps:
  - checkout: self
    submodules: true

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7' 
      addToPath: true 
      architecture: 'x64'
      
  - script: |
      pip install six==1.12 conan==1.21.1 tensorflow==2.0.0 matplotlib pillow onnxruntime
      pip install torch==1.4.0+cpu torchvision==0.5.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
    displayName: 'Install Conan'

  - script: |
      md out && cd out
      cmake .. -G "Visual Studio 16 2019" -A x64 -DNNCASE_TARGET=k210 -DCMAKE_BUILD_TYPE=Release
    displayName: 'Build'

  - task: MSBuild@1
    inputs:
      solution: 'out/nncase.sln'
      msbuildArchitecture: 'x64'
      configuration: 'Release'
      msbuildArguments: '-m'

  - script: |
      pip install pytest
      pytest tests --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'Test'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: 'out/bin' 
      includeRootFolder: false 
      archiveType: 'zip' # Options: zip, 7z, tar, wim
      archiveFile: '$(Build.ArtifactStagingDirectory)/ncc_win_x86_64.zip' 
      replaceExistingArchive: true 
      verbose: true
    displayName: 'Publish'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)/ncc_win_x86_64.zip
      artifactName: ncc_win_x86_64

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'

- job: MacOS
  timeoutInMinutes: 0
  pool:
    vmImage: 'macOS-10.14'

  steps:
  - checkout: self
    submodules: true

  - script: |
      xcode-select --install
      sudo xcode-select --switch /Library/Developer/CommandLineTools/
    displayName: 'Setup XCode'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7' 
      addToPath: true 
      architecture: 'x64'
      
  - script: |
      pip install six==1.12 conan==1.21.1 tensorflow==2.0.0 matplotlib pillow onnxruntime
      pip install torch torchvision
    displayName: 'Install Conan'

  - script: |
      mkdir out && cd out
      cmake .. -DNNCASE_TARGET=k210 -DCMAKE_BUILD_TYPE=Release
      make -j
      strip bin/ncc
      hdiutil create -srcfolder bin ncc_osx_x86_64.dmg
    displayName: 'Build'

  - script: |
      pip install pytest
      pytest tests --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'Test'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: out/ncc_osx_x86_64.dmg
      artifactName: ncc_osx_x86_64

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'