@using IsaGen
@inherits RazorLight.TemplatePage<IsaExtractor>
@{ DisableEncoding = true;
    string HexTemplate(uint value, uint length)
    {
        var hexForamt = $"X{(int)Math.Ceiling(length / 4f)}";
        return $"0x{value.ToString(hexForamt)}";
    } }
/* This file is generated by tools/stackvm_gen/IsaGen at @Raw(DateTimeOffset.Now.ToString()).
 *
 * Copyright 2019-2021 Canaan Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <nncase/runtime/stackvm/op_profile.h>
#include <nncase/runtime/stackvm/op_reader.h>

using namespace nncase;
using namespace nncase::runtime;
using namespace nncase::runtime::stackvm;

result<void> op_visitor::next() noexcept
{
    auto opcode = static_cast<opcode_t>(reader_.peek_unaligned<uint8_t>());
    if (opcode == opcode_t::TENSOR)
    {
        auto tensor_funct = static_cast<tensor_function_t>(reader_.peek_unaligned_with_offset<uint16_t>(1));
        switch (tensor_funct)
        {
@foreach (var inst in Model.Instructions.Where(x => x.Key == "Tensor Instructions").SelectMany(x => x.Value))
{
    var name = inst.Name.ToLowerInvariant().Replace('.', '_');
@:        case @inst.Fields.First(x => x.Name == "funct").ValueText:
@:        {
@:#if defined ENABLE_OP_PROFILE
@:            op_profile st("@(name)");
@:#endif
@:            return visit(op_reader<@(name)_op_t>()(reader_));
@:        }
}
        default:
            break;
        }
    }
    else
    {
        switch (opcode)
        {
@foreach (var inst in Model.Instructions.Where(x => x.Key != "Tensor Instructions").SelectMany(x => x.Value))
{
    var name = inst.Name.ToLowerInvariant().Replace('.', '_');
@:        case @inst.Fields.First(x => x.Name == "opcode").ValueText:
@:            return visit(op_reader<@(name)_op_t>()(reader_));
}
        default:
            break;
        }
    }

    return err(nncase_errc::stackvm_illegal_instruction);
}

result<void> op_visitor::visit(gsl::span<const gsl::byte> text) noexcept
{
    reader_ = span_reader(text);
    interrupted_ = false;

    while (!interrupted_ && !reader_.empty())
        try_(next());

    #ifdef ENABLE_OP_PROFILE
        op_profile profile_time;
        profile_time.print();
    #endif

    return ok();
}
