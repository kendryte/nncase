@using IsaGen
@inherits RazorLight.TemplatePage<IsaExtractor>
@{ DisableEncoding = true;
    string HexTemplate(uint value, uint length)
    {
        var hexForamt = $"X{(int)Math.Ceiling(length / 4f)}";
        return $"0x{value.ToString(hexForamt)}";
    } }
/* This file is generated by tools/stackvm_gen/IsaGen at @Raw(DateTimeOffset.Now.ToString()).
 *
 * Copyright 2019-2021 Canaan Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma once
#include "../error.h"
#include "../result.h"
#include "../span_reader.h"
#include "opcode.h"

BEGIN_NS_NNCASE_RT_MODULE(stackvm)

template <class TOp>
struct op_reader;
@foreach (var inst in Model.Instructions.SelectMany(x => x.Value))
{
    var name = inst.Name.ToLowerInvariant().Replace('.', '_');
@:
@:template <>
@:struct op_reader<@(name)_op_t>
@:{
@:    @(name)_op_t operator()(span_reader &reader) const
@:    {
@:        @(name)_op_t op(default_init);
foreach (var field in inst.Fields)
{
    if (field.IsEnum)
    {
@:        op.@field.Name = static_cast<@field.Type>(reader.read_unaligned<uint@(field.Length)_t>());
    }
    else
    {
@:        op.@field.Name = reader.read_unaligned<@field.Type>();
    }
}
@:        return op;
@:    }
@:};
}

class NNCASE_API op_visitor
{
public:
    op_visitor() noexcept
        : reader_({})
    {
    }

    ~op_visitor() = default;

    result<void> visit(gsl::span<const gsl::byte> text) noexcept;

    @foreach (var inst in Model.Instructions.SelectMany(x => x.Value))
    {
        var name = inst.Name.ToLowerInvariant().Replace('.', '_');
@:    virtual result<void> visit(NNCASE_UNUSED const @(name)_op_t &op) noexcept { return ok(); }
    }

protected:
    bool interrupted_;
    span_reader reader_;

private:
    result<void> next() noexcept;
};

END_NS_NNCASE_RT_MODULE
