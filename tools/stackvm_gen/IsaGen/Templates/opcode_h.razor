@using IsaGen
@inherits RazorLight.TemplatePage<IsaExtractor>
@{ DisableEncoding = true;
    string HexTemplate(uint value, uint length)
    {
        var hexForamt = $"X{(int)Math.Ceiling(length / 4f)}";
        return $"0x{value.ToString(hexForamt)}";
    } }
/* This file is generated by tools/stackvm_gen/IsaGen at @Raw(DateTimeOffset.Now.ToString()).
 *
 * Copyright 2019-2021 Canaan Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma once
#include "../datatypes.h"

BEGIN_NS_NNCASE_RT_MODULE(stackvm)

// Enums
@foreach (var e in Model.Enums)
{
@:
@:enum class @e.Name
@:{
foreach (var f in e.Fields)
{
@:    @f.Name = @HexTemplate(f.Value, e.Length),
}
@:};
}

// Instructions
@foreach (var inst in Model.Instructions.SelectMany(x => x.Value))
{
    var name = inst.Name.ToLowerInvariant().Replace('.', '_');
@:
@:struct @(name)_op_t
@:{
foreach (var field in inst.Fields)
{
@:    @field.Type @field.Name;
}
@:
@:    @(name)_op_t(default_init_t) noexcept { }
@:    explicit @(name)_op_t(@string.Join(", ", inst.Fields.Where(x => x.Value == null).Select(x => $"{x.Type} {x.Name}"))) noexcept
@:        : @string.Join(", ", inst.Fields.Select(x => x.Name + "(" + (x.Value.HasValue ? x.ValueText : x.Name) + ")"))
@:    {
@:    }
@:};
}

END_NS_NNCASE_RT_MODULE
