@using IsaGen
@inherits RazorLight.TemplatePage<IsaExtractor>
@{ DisableEncoding = true;
    string HexTemplate(uint value, uint length)
    {
        var hexForamt = $"X{(int)Math.Ceiling(length / 4f)}";
        return $"0x{value.ToString(hexForamt)}";
    }
}
/* This file is generated by tools/stackvm_gen/IsaGen at @Raw(DateTimeOffset.Now.ToString()).
 *
 * Copyright 2019-2021 Canaan Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma once
#include "../datatypes.h"
#include <vector>

BEGIN_NS_NNCASE_RT_MODULE(stackvm)

// Enums
@foreach (var e in Model.Enums)
{
@:
@:enum class @e.CppName : @e.UnderlyingCppType
@:{
foreach (var f in e.Fields)
{
@:    @f.CppName = @f.Value,
}
@:};
}

// Instructions
@foreach (var inst in Model.Instructions.SelectMany(x => x.Value))
{
    var name = inst.CppName.ToLowerInvariant().Replace('.', '_');
@:
@:struct @(name)_op_t
@:{
foreach (var field in inst.Fields.Where(x => !x.IsOpCode))
{
@:    @field.CppType @field.CppName;
}
@:};
}

// Tensor instructions
@foreach (var inst in Model.TensorInstructions.SelectMany(x => x.Value).OrderBy(x => x.CppName))
{
    var name = "tensor_" + inst.CppName.ToLowerInvariant().Replace('.', '_');
@:
@:struct @(name)_op_t
@:{
foreach (var field in inst.Fields.Where(x => !x.IsOpCode))
{
@:    @field.CppType @field.CppName;
}
@:};
}


@{
    var o = Model.Enums.First(x => x.CppName == "opcode_t");
    var tensorF = Model.Enums.First(x => x.CppName == "tensor_function_t");
} 


inline std::string to_string(tensor_function_t tensor_funct)
{
    switch(tensor_funct)
    {
@foreach (var f in tensorF.Fields)
{
@:        case tensor_function_t::@f.CppName: return "@f.CppName";
}
    }
    return "unknown tensor_function_t";
}

inline std::string to_string(opcode_t code)
{
    switch(code)
    {
@foreach (var f in o.Fields)
    {
@:      case opcode_t::@f.CppName: return "@f.CppName";
    }
    }
    return "unknown opcode_t";
}
END_NS_NNCASE_RT_MODULE
