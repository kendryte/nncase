@using IsaGen
@inherits RazorLight.TemplatePage<IsaExtractor>
@{ DisableEncoding = true;
    string HexTemplate(uint value, uint length)
    {
        var hexForamt = $"X{(int)Math.Ceiling(length / 4f)}";
        return $"0x{value.ToString(hexForamt)}";
    } }
/* This file is generated by tools/stackvm_gen/IsaGen at @Raw(DateTimeOffset.Now.ToString()).
 *
 * Copyright 2019-2021 Canaan Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "../runtime_function.h"
#include <nncase/kernels/stackvm/tensor_ops.h>
#include <nncase/runtime/interpreter.h>

using namespace nncase;
using namespace nncase::runtime;
using namespace nncase::runtime::stackvm;

#ifdef NNCASE_DUMP_MANAGER
#define dump_op(op) \
    auto dump_manager = module().interp().dump_manager(); \
    dump_manager->dump_op(op)
#define dump_input(var) dump_manager->dump_input(var, #var)
#define dump_output(var) dump_manager->dump_output(var)
#else
#define dump_op(op)
#define dump_input(var)
#define dump_output(var)
#endif

@foreach (var inst in Model.TensorInstructions.SelectMany(x => x.Value).OrderBy(x => x.CppName))
{
    var name = inst.CppName.ToLowerInvariant().Replace('.', '_');
@:
@:result<void> stackvm_runtime_function::visit([[maybe_unused]] const tensor_@(name)_op_t &op) noexcept {
@:    dump_op("@(name)");
foreach(var input in inst.Inputs)
{
@:    try_var(@input.CppName, pop_value());
@:    dump_input(@input.CppName);
}
@:    try_var(output, kernels::stackvm::@(name)(@string.Join(", ", inst.Fields.Where(x => !x.IsOpCode && x.CppName != "tensor_funct").Select(x => $"op.{x.CppName}").Concat(inst.Inputs.Select(x => $"{x.CppName}").Concat(new[]{"nullptr", "module().kernel_context()"})))));
@:    dump_output(output);
@:    stack_.push(std::move(output));
@:    return ok();
@:}
}
