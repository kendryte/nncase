@using IsaGen
@inherits RazorLight.TemplatePage<IsaExtractor>
@{ DisableEncoding = true;
    string HexTemplate(uint value, uint length)
    {
        var hexForamt = $"X{(int)Math.Ceiling(length / 4f)}";
        return $"0x{value.ToString(hexForamt)}";
    } }
// Copyright (c) Canaan Inc. All rights reserved.
// Licensed under the Apache license. See LICENSE file in the project root for full license information.
/* This file is generated by tools/stackvm_gen/IsaGen at @Raw(DateTimeOffset.Now.ToString()). */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Nncase.IR;
using Nncase.Runtime.StackVM;
using Nncase.TIR;

namespace Nncase.CodeGen.StackVM;

public partial class StackVMEmitter
{
    private readonly BinaryWriter _writer;
@foreach (var inst in Model.Instructions.SelectMany(x => x.Value).OrderBy(x => x.CSharpName))
{
@:
@:    ///<summary>@(inst.Description).</summary>
@:    public void @(inst.CSharpName)(@string.Join(", ", inst.Fields.Where(x => x.Value == null).Select(x => $"{x.CSharpType} {x.CSharpName}")))
@:    {
foreach (var field in inst.Fields)
{
    var value = field.Value.HasValue ? field.Value.ToString() : field.CSharpName;
    if (field.IsEnum)
    {
@:        Write((@field.UnderlyingCSharpType)@value);
    }
    else
    {
@:        Write(@value);
    }
}
@:    }
}

    public partial class TensorEmitter
    {
        private readonly StackVMEmitter _emitter;
@foreach (var inst in Model.TensorInstructions.SelectMany(x => x.Value).OrderBy(x => x.CSharpName))
{
@:
@:        ///<summary>@(inst.Description).</summary>
@:        public void @(inst.CSharpName)(@string.Join(", ", inst.Fields.Where(x => x.Value == null).Select(x => $"{x.CSharpType} {x.CSharpName}")))
@:        {
foreach (var field in inst.Fields)
{
    var value = field.Value.HasValue ? field.Value.ToString() : field.CSharpName;
    if (field.IsEnum && field.CSharpType != "DataType")
    {
@:            _emitter.Write((@field.UnderlyingCSharpType)@value);
    }
    else
    {
@:            _emitter.Write(@value);
    }
}
@:        }
}
    }
}
