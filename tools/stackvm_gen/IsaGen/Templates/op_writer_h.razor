@using IsaGen
@inherits RazorLight.TemplatePage<IsaExtractor>
@{ DisableEncoding = true;
    string HexTemplate(uint value, uint length)
    {
        var hexForamt = $"X{(int)Math.Ceiling(length / 4f)}";
        return $"0x{value.ToString(hexForamt)}";
    } }
/* This file is generated by tools/stackvm_gen/IsaGen at @Raw(DateTimeOffset.Now.ToString()).
 *
 * Copyright 2019-2021 Canaan Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma once
#include "../codegen_types.h"
#include <nncase/runtime/stackvm/opcode.h>

namespace nncase::codegen::stackvm
{
template <class TOp>
struct op_writer;
@foreach (var inst in Model.Instructions.SelectMany(x => x.Value))
{
    var name = inst.Name.ToLowerInvariant().Replace('.', '_');
@:
@:template <>
@:struct op_writer<nncase::runtime::stackvm::@(name)_op_t>
@:{
@:    void operator()(const nncase::runtime::stackvm::@(name)_op_t &op, binary_writer &writer) const
@:    {
foreach (var field in inst.Fields)
{
    if (field.IsEnum)
    {
@:        writer.write(static_cast<uint@(field.Length)_t>(op.@field.Name));
    }
    else
    {
@:        writer.write(op.@field.Name);
    }
}
@:    }
@:};
}
    
class NNCASE_API op_builder
{
public:
    op_builder(ir::node &node, section_writer &writer);
    op_builder(op_builder &) = delete;
    op_builder(op_builder &&) = default;

    @foreach (var inst in Model.Instructions.SelectMany(x => x.Value))
    {
        var name = inst.Name.ToLowerInvariant().Replace('.', '_');
@:    void @(name)_(@string.Join(", ", inst.Fields.Where(x => x.Value == null).Select(x => $"{x.Type} {x.Name}")));
    }

private:
    section_writer &writer_;
};
}
