@using global::CApiGen
@inherits RazorLight.TemplatePage<CommandExtractor>
@{
  DisableEncoding = true;
}
    // clang-format off
    /* This block is generated by tools/stackvm_gen/CApiGen at @Raw(DateTimeOffset.Now.ToString()). */
@foreach(var info in Model.OptionInfos)
{
  if(info.PropertyType.IsEnum)
  {
    var enumName = info.PropertyType.Name.ToSnake();
@:
    @:py::enum_<@(enumName)_t>(m, "@(info.PropertyType.Name)")
    var filedNames = info.PropertyType.GetEnumNames();
    for (int i = 0; i < filedNames.Length; i++)
    {
      var name = filedNames[i];
    @:  .value("@(name)", @(enumName)_@(name.ToSnake()))@(i == filedNames.Length-1 ? ";" : "")
    }
  }
}


    py::class_<@(Model.OptionsType.Name.ToSnake())>(m, "@(Model.OptionsType.Name)")
      .def(py::init())
@for (int i = 0; i < Model.OptionInfos.Count; i++)
{
    var info = Model.OptionInfos[i];
      @:.def_property(
      @:  "@(info.PropertyName)",
    if (info.PropertyType.IsEnum) {
      @:  py::overload_cast<>(&@(Model.OptionsType.Name.ToSnake())::@(info.PropertyName.ToSnake())),
    } else {
      @:  []() {},
    }
      @:  py::overload_cast<@(info.PropertyType.RenderType(LangMode.Pyb))>(&@(Model.OptionsType.Name.ToSnake())::@(info.PropertyName.ToSnake()))) @if (i == Model.OptionInfos.Count - 1) { @(";") }
}

    /* end the auto generated block by tools/stackvm_gen/CApiGen at @Raw(DateTimeOffset.Now.ToString()). */
    // clang-format on