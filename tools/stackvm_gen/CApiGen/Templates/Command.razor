@using global::CApiGen
@inherits RazorLight.TemplatePage<CommandExtractor>
@{
  DisableEncoding = true;
}
// Copyright (c) Canaan Inc. All rights reserved.
// Licensed under the Apache license. See LICENSE file in the project root for full license information.
/* This file is generated by tools/stackvm_gen/CApiGen at @Raw(DateTimeOffset.Now.ToString()). */

using System;
using System.Collections.Generic;
using System.CommandLine;
using System.CommandLine.Binding;
using System.CommandLine.Invocation;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using Nncase;
using Nncase.CommandLine;

namespace Nncase.Targets;

@{
  var CmdClassName = $"{Model.OptionsType.Name}Command";
  var BindClassName = $"{Model.OptionsType.Name}Binder";
}
public sealed class @(CmdClassName) : Command
{
    public @(CmdClassName)(string name)
        : base(name)
    {
@foreach (var info in Model.OptionInfos) 
{
@:        @(info.PropertyName)Option = new Option<@(info.PropertyType.RenderType(LangMode.CSC))>(
@:            name: "@(info.DisplayName)",
@:            description: "@(info.Description)",
if (info.Parser is string parseFunc) 
{
@:            parseArgument: ArgumentParsers.@(parseFunc)@(info.AllowMultiple ? ")" : ");")
}else
{
@:            getDefaultValue: @(info.RenderCSCDefaultValue())@(info.AllowMultiple ? ")" : ");")
}
if (info.AllowMultiple) 
{
@:          {
@:              AllowMultipleArgumentsPerToken = true,
@:          };
}
@:        Add(@(info.PropertyName)Option);
}
    }
@foreach (var info in Model.OptionInfos)
{
@:
@:    public Option<@(info.PropertyType.RenderType(LangMode.CSC))> @(info.PropertyName)Option { get; }

}
}

public sealed class @(BindClassName)
{
    private readonly @(CmdClassName) _cmd;

    public @(BindClassName)(@(CmdClassName) cmd)
    {
        _cmd = cmd;
    }

    public @(Model.OptionsType.Name) GetBoundValue(InvocationContext context)
    {
        return new @(Model.OptionsType.Name)()
        {
@foreach (var info in Model.OptionInfos) 
{
@:            @(info.PropertyName) = context.ParseResult.GetValueForOption(_cmd.@(info.PropertyName)Option)!@(info.PropertyType.IsArray ? ".ToArray()," : ",")
}
        };
    }
}
