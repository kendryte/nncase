name: Build

on: [push, pull_request]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04,windows-2019]

    steps:
    - uses: actions/checkout@v2
        
    - name: Install System Requirements
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt install libgtk2.0-dev -y
          
    - name: Setup Python
      uses: actions/setup-python@v2.2.1
      with:
        python-version: 3.7

    - name: Install Conan
      shell: bash
      run: |
        pip install conan

    - name: Configure Conan
      if: runner.os == 'Linux'
      shell: bash
      run: |
        conan profile new default --detect
        conan profile update settings.compiler.libcxx=libstdc++11 default

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      env:
        CC: gcc-10
        CXX: g++-10
      if: runner.os == 'Linux'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTING=ON

    - name: Configure CMake
      if: runner.os == 'Windows'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTING=ON

    - name: Build
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
        cmake --build . --config $BUILD_TYPE

    - name: Install
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake --install . --prefix ../install

    - name: CTest
      shell: bash
      working-directory: ${{github.workspace}}/build/tests/kernels
      run: ctest

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.2
      if: runner.os == 'Windows'
      with:
        name: nncase_win_x86_64
        path: ${{github.workspace}}/install
        if-no-files-found: error
      
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.2
      if: runner.os == 'Linux'
      with:
        name: nncase_linux_x86_64
        path: ${{github.workspace}}/install
        if-no-files-found: error

  test-compiler:
    needs: [build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04,windows-2019]

    steps:
    - uses: actions/checkout@v2
          
    - name: Setup Python
      uses: actions/setup-python@v2.2.1
      with:
        python-version: 3.7
        
    - name: Install Python Packages
      shell: bash
      run: |
        pip install conan tensorflow==2.4.1 matplotlib pillow onnx==1.8.0 onnx-simplifier==0.2.21 onnxoptimizer==0.1.2 onnxruntime==1.6.0
        pip install torch==1.7.0+cpu torchvision==0.8.1+cpu -f https://download.pytorch.org/whl/torch_stable.html
        pip install pytest
      
    - name: Create Test Environment
      working-directory: ${{github.workspace}}
      shell: bash
      run: |
        pip install pytest
        mkdir test_results
      
    - name: Download a Build Artifact
      uses: actions/download-artifact@v2.0.9
      if: runner.os == 'Linux'
      with:
        name: nncase_linux_x86_64
        path: ${{github.workspace}}/install
      
    - name: Download a Build Artifact
      uses: actions/download-artifact@v2.0.9
      if: runner.os == 'Windows'
      with:
        name: nncase_win_x86_64
        path: ${{github.workspace}}/install

    - name: Test
      working-directory: ${{github.workspace}}
      if: runner.os == 'Linux'
      shell: bash
      env:
        LD_LIBRARY_PATH: ${{github.workspace}}/install/lib
        PYTHONPATH: ${{github.workspace}}/install/lib:${{github.workspace}}/install/python:${{github.workspace}}/tests
      run: |
        pytest tests/importer --doctest-modules --junitxml=test_results/importer.xml

    - name: Test
      working-directory: ${{github.workspace}}
      if: runner.os == 'Windows'
      shell: bash
      env:
        PATH: ${{github.workspace}}/install/bin
        PYTHONPATH: ${{github.workspace}}/install/lib;${{github.workspace}}/install/python;${{github.workspace}}/tests
      run: |
        pytest tests/importer --doctest-modules --junitxml=test_results/importer.xml

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: test_results/*.xml
