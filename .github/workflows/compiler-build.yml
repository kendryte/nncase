name: compiler-build

on: [push, pull_request]

jobs:
  build-native:
    name: build-native-${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}
    strategy:
      matrix:
        config:
          - {name: x86_64-macos, os: macos-latest, cmakeArgs: '', buildType: Release}
          - {name: x86_64-linux, os: ubuntu-latest, cmakeArgs: '', buildType: Release}
          - {name: x86_64-windows, os: windows-latest, arch: x64, cmakeArgs: '', buildType: Release}

    steps:
      - uses: actions/checkout@v3
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set up build environment (Windows, Visual Studio)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{matrix.config.arch}}
        if: runner.os == 'Windows'

      - name: Set up build environment (Macos)
        run: |
          brew install sunnycase/core/libomp@11.1.0
        if: runner.os == 'Macos'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Install Conan
        shell: bash
        run: |
          pip install conan
          
      - name: Configure Conan (Linux)
        run: |
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default
          echo "CC=gcc-10" >> $GITHUB_ENV
          echo "CXX=g++-10" >> $GITHUB_ENV
        if: runner.os == 'Linux'
        
      - name: Configure CMake
        shell: bash
        run: |
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=${{matrix.config.buildType}} ${{matrix.config.cmakeArgs}} -DBUILD_TESTING=ON -DPython3_ROOT_DIR=${pythonLocation}
          
      - name: Build & Install
        run: |
          cmake --build build --config ${{matrix.config.buildType}}
          cmake --install build --prefix install
          
      - name: Upload nncase Native Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: nncase-native-${{matrix.config.name}}
          path: ${{github.workspace}}/install
          if-no-files-found: error
        
  build-compiler:
    needs: [build-native]
    name: build-${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}
    strategy:
      matrix:
        dotnet-version: ['6.0']
        config:
          - {name: x86_64-macos, os: macos-latest, shell: bash, rid: osx-x64, buildType: Release}
          - {name: x86_64-linux, os: ubuntu-latest, shell: bash, rid: linux-x64, buildType: Release}
          - {name: x86_64-windows, os: windows-latest, shell: bash, rid: win-x64, buildType: Release}

    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{matrix.dotnet-version}}
      
      - name: Install nncase native Artifact
        uses: actions/download-artifact@v2.0.9
        with:
          name: nncase-native-${{matrix.config.name}}
          path: ${{github.workspace}}/install
        
      - name: Set up build environment (Macos)
        run: |
          brew install sunnycase/core/libomp@11.1.0
        if: runner.os == 'Macos'

      - name: Remove useless packages
        shell: pwsh
        run: |
          Get-Content .\Directory.Packages.props | Where-Object {$_ -notmatch 'libtorch-cpu-osx' -and $_ -notmatch 'libtorch-cpu-linux'} | Set-Content .\Directory.Packages.props.new
          rm .\Directory.Packages.props
          mv .\Directory.Packages.props.new .\Directory.Packages.props
          Get-Content .\src\Nncase.Core\Nncase.Core.csproj | Where-Object {$_ -notmatch 'libtorch-cpu-osx' -and $_ -notmatch 'libtorch-cpu-linux'} | Set-Content .\src\Nncase.Core\Nncase.Core.csproj.new
          rm .\src\Nncase.Core\Nncase.Core.csproj
          mv .\src\Nncase.Core\Nncase.Core.csproj.new .\src\Nncase.Core\Nncase.Core.csproj
        if: runner.os == 'Windows'

      - name: Build
        run: |
          dotnet build -c ${{matrix.config.buildType}}
          dotnet publish src/Nncase.Compiler -c ${{matrix.config.buildType}} --sc false --use-current-runtime

      - name: Set up Dotnet Test settings
        uses: 1arp/create-a-file-action@0.2
        with:
          file: 'test.runsettings'
          content: |
            <?xml version="1.0" encoding="utf-8"?>
            <!-- File name extension must be .runsettings -->
            <RunSettings>
              <RunConfiguration>
                <EnvironmentVariables>
                  <LD_LIBRARY_PATH>${{github.workspace}}/install/lib</LD_LIBRARY_PATH>
                  <DYLD_LIBRARY_PATH>${{github.workspace}}/install/lib</DYLD_LIBRARY_PATH>
                </EnvironmentVariables>
              </RunConfiguration>
            </RunSettings>

      - name: Dotnet Test
        working-directory: ${{github.workspace}}
        env:
          PATH: ${{github.workspace}}/install/bin
        run: |
          dotnet test -c ${{matrix.config.buildType}} -s test.runsettings --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        if: matrix.config.name == 'x86_64-linux'
        with:
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true
          
      - name: Upload nncase Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: nncase-${{matrix.config.name}}
          path: ${{github.workspace}}/src/Nncase.Compiler/bin/${{matrix.config.buildType}}/net${{matrix.dotnet-version}}/${{matrix.config.rid}}/publish
          if-no-files-found: error
          
  test-compiler:
    needs: [build-compiler]
    name: test-${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}
    strategy:
      matrix:
        dotnet-version: ['6.0']
        config:
          #- {name: x86_64-macos, os: macos-latest, shell: bash}
          - {name: x86_64-linux, os: ubuntu-latest, shell: bash}
          #- {name: x86_64-windows, os: windows-latest, shell: bash}

    env:
      VULKANSDK_VER: 1.2.182.0

    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{matrix.dotnet-version}}
      
      - name: Install nncase native Artifact
        uses: actions/download-artifact@v3
        with:
          name: nncase-native-${{matrix.config.name}}
          path: ${{github.workspace}}/install
      
      - name: Install nncase
        uses: actions/download-artifact@v3
        with:
          name: nncase-${{matrix.config.name}}
          path: ${{github.workspace}}/install
      
      - name: Set up test environment (macOS)
        run: |
          brew install sunnycase/core/libomp@11.1.0
          aria2c --parameterized-uri=true https://{sdk.lunarg.com/sdk/download/${VULKANSDK_VER}/mac,distfiles.macports.org/MoltenVK}/vulkansdk-macos-${VULKANSDK_VER}.dmg
          hdiutil attach ./vulkansdk-macos-*.dmg
          sudo /Volumes/vulkansdk-macos-*/InstallVulkan.app/Contents/MacOS/InstallVulkan --root $HOME/VulkanSDK --accept-licenses --default-answer --confirm-command install
          hdiutil detach /Volumes/vulkansdk-macos-*
          echo "VULKAN_SDK=$HOME/VulkanSDK/macOS" >> $GITHUB_ENV
          wget https://github.com/sunnycase/swiftshader/releases/download/v1.0/swiftshader-macos-10.15-x86_64.zip -O swiftshader.zip
          unzip swiftshader.zip
          sudo cmake -E make_directory /usr/local/share/vulkan/icd.d
          sudo cp lib/* /usr/local/share/vulkan/icd.d
          cp install/lib/*.dylib install/
          echo "PYTHONPATH=$GITHUB_WORKSPACE/install/lib:$GITHUB_WORKSPACE/install/python:$GITHUB_WORKSPACE/tests" >> $GITHUB_ENV
        if: runner.os == 'macOS'
        
      - name: Set up test environment (Linux)
        run: |
          wget https://sdk.lunarg.com/sdk/download/${VULKANSDK_VER}/linux/vulkansdk-linux-x86_64-${VULKANSDK_VER}.tar.gz -O vulkansdk.tar.gz
          tar xf vulkansdk.tar.gz
          sudo cp -P ${VULKANSDK_VER}/x86_64/lib/libvulkan.so* /usr/local/lib/
          wget https://github.com/sunnycase/swiftshader/releases/download/v1.0/swiftshader-ubuntu-18.04-x86_64.zip -O swiftshader.zip
          unzip swiftshader.zip
          sudo cmake -E make_directory /usr/local/share/vulkan/icd.d
          sudo cp lib/* /usr/local/share/vulkan/icd.d
          cp install/lib/*.so install/
          echo "PYTHONPATH=$GITHUB_WORKSPACE/install/lib:$GITHUB_WORKSPACE/install/python:$GITHUB_WORKSPACE/tests" >> $GITHUB_ENV
        if: runner.os == 'Linux'
        
      - name: Set up test environment (Windows)
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://sdk.lunarg.com/sdk/download/${env:VULKANSDK_VER}/windows/VulkanSDK-${env:VULKANSDK_VER}-Installer.exe -O VulkanSDK-Installer.exe
          .\VulkanSDK-Installer.exe /S
          Invoke-WebRequest -Uri https://github.com/sunnycase/swiftshader/releases/download/v1.0/swiftshader-windows-2019-x86_64.zip -OutFile swiftshader.zip
          Expand-Archive swiftshader.zip
          Copy-Item swiftshader\lib\vk_swiftshader_icd.json swiftshader\bin\
          Copy-Item install/bin/*.dll install/
          echo "VK_ICD_FILENAMES=${env:GITHUB_WORKSPACE}/swiftshader/bin/vk_swiftshader_icd.json" >> $env:GITHUB_ENV
          echo "PYTHONPATH=${env:GITHUB_WORKSPACE}/install/lib;${env:GITHUB_WORKSPACE}/install/python;${env:GITHUB_WORKSPACE}/tests" >> $env:GITHUB_ENV
        if: runner.os == 'Windows'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      
      - name: Install Python Packages
        run: pip install -r requirements.test.txt
      
      - name: Create Test Environment
        run: mkdir test_results

      - name: Test
        working-directory: ${{github.workspace}}
        shell: bash
        env:
          PATH: ${{github.workspace}}/install/bin
          NNCASE_COMPILER: ${{github.workspace}}/install/Nncase.Compiler.dll
        run: |
          pytest tests/importer/onnx_/basic/ --doctest-modules --junitxml=test_results/onnx_basic.xml
          pytest tests/importer/onnx_/combine/ --doctest-modules --junitxml=test_results/onnx_combine.xml
          pytest tests/importer/tflite_/basic/ --doctest-modules --junitxml=test_results/tflite_basic.xml
          pytest tests/importer/tflite_/combine/ --doctest-modules --junitxml=test_results/tflite_combine.xml
          pytest tests/importer/tflite_/model/ --doctest-modules --junitxml=test_results/tflite_model.xml
          
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always() && matrix.config.name == 'x86_64-linux'
        with:
          files: test_results/*.xml
